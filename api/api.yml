# yaml-language-server: $schema=https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/schemas/v3.0/schema.json

openapi: 3.0.1

info:
  title: Knox
  version: 1.0.0
  description: |
    This is the Knox API specification. Knox is a service that manages Terraform environments and snapshots.

    There is an available Helm chart for Knox.

    ```shell
    helm repo add knox https://zeiss.github.io/knox/helm/charts
    helm repo update
    helm search repo knox
    ```

servers:
  - url: https://localhost:8080

paths:
  /_health:
    get:
      tags:
        - Liveness
      summary: Get system health status
      operationId: getHealth
      responses:
        "200":
          description: System is healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "500":
          description: System is down
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"

  /_ready:
    get:
      tags:
        - Readiness
      summary: Get system readiness
      operationId: getReady
      responses:
        "200":
          description: System is ready to accept traffic
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "500":
          description: System not ready to accept traffic
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"

  /client/{teamName}/{projectName}/{environmentName}/lock:
    post:
      tags:
        - Environments
      summary: Lock the state of Terraform environment
      operationId: lockEnvironment
      parameters:
        - $ref: "#/components/parameters/teamName"
        - $ref: "#/components/parameters/projectName"
        - $ref: "#/components/parameters/environmentName"
      security:
        - basicAuth: [] # Use basic auth to lock the environment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LockInfo"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LockInfo"
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /client/{teamName}/{projectName}/{environmentName}/unlock:
    post:
      tags:
        - Environments
      summary: Unlock the state of Terraform environment
      operationId: unlockEnvironment
      parameters:
        - $ref: "#/components/parameters/teamName"
        - $ref: "#/components/parameters/projectName"
        - $ref: "#/components/parameters/environmentName"
      security:
        - basicAuth: [] # Use basic auth to unlock the environment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LockInfo"
      responses:
        "200":
          description: Successful response
        "204":
          description: Successful response
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /client/{teamName}/{projectName}/{environmentName}/state:
    get:
      tags:
        - Environments
      summary: Get the state of Terraform environment
      operationId: getEnvironmentState
      parameters:
        - $ref: "#/components/parameters/teamName"
        - $ref: "#/components/parameters/projectName"
        - $ref: "#/components/parameters/environmentName"
      security:
        - basicAuth: [] # Use basic auth to get the environment state
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payload"
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - Environments
      summary: Update the state of Terraform environment
      operationId: updateEnvironmentState
      parameters:
        - $ref: "#/components/parameters/teamName"
        - $ref: "#/components/parameters/projectName"
        - $ref: "#/components/parameters/environmentName"
      security:
        - basicAuth: [] # Use basic auth to update the environment state
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Payload"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payload"
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /teams:
    post:
      tags:
        - Teams
      summary: Create a new team
      operationId: createTeam
      security:
        - openId: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamCreate"
      responses:
        "201":
          description: Team created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      # Add the policy to check if the user has access to create a team
      x-fiber-authz-fga:
        user:
          namespace: user
          auth_type: oidc
        relation:
          name: admin
        object:
          namespace: system
          components:
            - in: path
              name: teamName

    get:
      tags:
        - Teams
      summary: Get a list of teams
      operationId: getTeams
      security:
        - openId: []
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  teams:
                    type: array
                    items:
                      $ref: "#/components/schemas/Team"
                  metadata:
                    type: object
                    properties:
                      limit:
                        type: integer
                      offset:
                        type: integer
                      totalCount:
                        type: integer
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      # Add the policy to check if the user has access to list teams
      x-fiber-authz-fga:
        user:
          namespace: user
          auth_type: oidc
        relation:
          name: admin
        object:
          namespace: system
          name: global

  /teams/{teamName}:
    get:
      tags:
        - Teams
      summary: Get a team
      operationId: getTeam
      security:
        - openId: []
      parameters:
        - $ref: "#/components/parameters/teamName"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - Teams
      summary: Update a team
      operationId: updateTeam
      security:
        - openId: []
      parameters:
        - $ref: "#/components/parameters/teamName"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamUpdate"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Teams
      summary: Delete a team
      operationId: deleteTeam
      security:
        - openId: []
      parameters:
        - $ref: "#/components/parameters/teamName"
      responses:
        "204":
          description: Successful response
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      # Add the policy to check if the user has access to delete a team
      x-fiber-authz-fga:
        user:
          namespace: user
          auth_type: oidc
        relation:
          name: admin
        object:
          namespace: system
          components:
            - in: path
              name: teamName

  /teams/{teamName}/projects:
    post:
      tags:
        - Projects
      summary: Create a new project
      operationId: createProject
      parameters:
        - $ref: "#/components/parameters/teamName"
      security:
        - openId: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectCreate"
      responses:
        "201":
          description: Project created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    get:
      tags:
        - Projects
      summary: Get a list of projects
      operationId: getProjects
      security:
        - openId: []
      parameters:
        - $ref: "#/components/parameters/teamName"
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: "#/components/schemas/Project"
                  metadata:
                    type: object
                    properties:
                      limit:
                        type: integer
                      offset:
                        type: integer
                      totalCount:
                        type: integer
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /teams/{teamName}/projects/{projectName}:
    get:
      tags:
        - Projects
      summary: Get a project
      operationId: getProject
      security:
        - openId: []
      parameters:
        - $ref: "#/components/parameters/teamName"
        - $ref: "#/components/parameters/projectName"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      # Add the policy to check if the user has access to the project
      x-fiber-authz-fga:
        user:
          namespace: user
          auth_type: oidc
        relation:
          name: reader
        object:
          namespace: project
          separator: /
          components:
            - in: path
              name: teamName
            - in: path
              name: projectName

    put:
      tags:
        - Projects
      summary: Update a project
      operationId: updateProject
      parameters:
        - $ref: "#/components/parameters/teamName"
        - $ref: "#/components/parameters/projectName"
      security:
        - openId: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectUpdate"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Projects
      summary: Delete a project
      operationId: deleteProject
      parameters:
        - $ref: "#/components/parameters/teamName"
        - $ref: "#/components/parameters/projectName"
      security:
        - openId: []
      responses:
        "204":
          description: Successful response
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      # Add the policy to check if the user has access to delete the project
      x-fiber-authz-fga:
        user:
          namespace: user
          auth_type: oidc
        relation:
          name: admin
        object:
          namespace: project
          separator: /
          components:
            - in: path
              name: teamName
            - in: path
              name: projectName

  /teams/{teamName}/projects/{projectName}/environments:
    post:
      tags:
        - Environments
      summary: Create a new environment
      operationId: createEnvironment
      security:
        - openId: []
      parameters:
        - $ref: "#/components/parameters/teamName"
        - $ref: "#/components/parameters/projectName"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnvironmentCreate"
      responses:
        "201":
          description: Environment created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Environment"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      # Add the policy to check if the user has access to delete the project
      x-fiber-authz-fga:
        user:
          namespace: user
          auth_type: oidc
        relation:
          name: writer
        object:
          namespace: project
          separator: /
          components:
            - in: path
              name: teamName
            - in: path
              name: projectName

    get:
      tags:
        - Environments
      summary: Get a list of environments
      operationId: getEnvironments
      security:
        - openId: []
      parameters:
        - $ref: "#/components/parameters/teamName"
        - $ref: "#/components/parameters/projectName"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  environments:
                    type: array
                    items:
                      $ref: "#/components/schemas/Environment"
                  metadata:
                    type: object
                    properties:
                      limit:
                        type: integer
                      offset:
                        type: integer
                      totalCount:
                        type: integer
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

      # Add the policy to check if the user has access to delete the project
      x-fiber-authz-fga:
        user:
          namespace: user
          auth_type: oidc
        relation:
          name: reader
        object:
          namespace: project
          separator: /
          components:
            - in: path
              name: teamName
            - in: path
              name: projectName

  /teams/{teamName}/projects/{projectName}/environments/{environmentName}:
    get:
      tags:
        - Environments
      summary: Get an environment
      operationId: getEnvironment
      parameters:
        - $ref: "#/components/parameters/teamName"
        - $ref: "#/components/parameters/projectName"
        - $ref: "#/components/parameters/environmentName"
      security:
        - openId: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Environment"
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      # Add the policy to check if the user has access to delete the project
      x-fiber-authz-fga:
        user:
          namespace: user
          auth_type: oidc
        relation:
          name: reader
        object:
          namespace: environment
          separator: /
          components:
            - in: path
              name: teamName
            - in: path
              name: projectName
            - in: path
              name: environmentName

    put:
      tags:
        - Environments
      summary: Update an environment
      operationId: updateEnvironment
      parameters:
        - $ref: "#/components/parameters/teamName"
        - $ref: "#/components/parameters/projectName"
        - $ref: "#/components/parameters/environmentName"
      security:
        - openId: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnvironmentUpdate"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Environment"
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      # Add the policy to check if the user has access to delete the project
      x-fiber-authz-fga:
        user:
          namespace: user
          auth_type: oidc
        relation:
          name: writer
        object:
          namespace: environment
          separator: /
          components:
            - in: path
              name: teamName
            - in: path
              name: projectName
            - in: path
              name: environmentName

    delete:
      tags:
        - Environments
      summary: Delete an environment
      operationId: deleteEnvironment
      parameters:
        - $ref: "#/components/parameters/teamName"
        - $ref: "#/components/parameters/projectName"
        - $ref: "#/components/parameters/environmentName"
      security:
        - openId: []
      responses:
        "204":
          description: Successful response
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      # Add the policy to check if the user has access to delete the project
      x-fiber-authz-fga:
        user:
          namespace: user
          auth_type: oidc
        relation:
          name: reader
        object:
          namespace: environment
          separator: /
          components:
            - in: path
              name: teamName
            - in: path
              name: projectName
            - in: path
              name: environmentName

  /teams/{teamName}/projects/{projectName}/environments/{environmentName}/snapshots:
    get:
      tags:
        - Snapshots
      summary: Get a list of snapshots
      operationId: getSnapshots
      parameters:
        - $ref: "#/components/parameters/teamName"
        - $ref: "#/components/parameters/projectName"
        - $ref: "#/components/parameters/environmentName"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  snapshots:
                    type: array
                    items:
                      $ref: "#/components/schemas/Snapshot"
                  metadata:
                    type: object
                    properties:
                      limit:
                        type: integer
                      offset:
                        type: integer
                      totalCount:
                        type: integer
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags:
        - Snapshots
      summary: Create a new snapshot
      operationId: createSnapshot
      parameters:
        - $ref: "#/components/parameters/teamName"
        - $ref: "#/components/parameters/projectName"
        - $ref: "#/components/parameters/environmentName"
      security:
        - openId: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SnapshotCreate"
      responses:
        "201":
          description: Snapshot created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Snapshot"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /teams/{teamName}/projects/{projectName}/environments/{environmentName}/snapshots/{snapshotId}:
    get:
      tags:
        - Snapshots
      summary: Get a snapshot
      operationId: getSnapshot
      parameters:
        - $ref: "#/components/parameters/teamName"
        - $ref: "#/components/parameters/projectName"
        - $ref: "#/components/parameters/environmentName"
        - $ref: "#/components/parameters/snapshotId"
      security:
        - openId: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Snapshot"
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - Snapshots
      summary: Delete a snapshot
      operationId: deleteSnapshot
      parameters:
        - $ref: "#/components/parameters/teamName"
        - $ref: "#/components/parameters/projectName"
        - $ref: "#/components/parameters/environmentName"
        - $ref: "#/components/parameters/snapshotId"
      security:
        - openId: []
      responses:
        "204":
          description: Successful response
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  parameters:
    teamName:
      name: teamName
      in: path
      required: true
      schema:
        type: string
    projectName:
      name: projectName
      in: path
      required: true
      schema:
        type: string
    environmentName:
      name: environmentName
      in: path
      required: true
      schema:
        type: string
    snapshotId:
      name: snapshotId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    offset:
      name: offset
      in: query
      required: false
      schema:
        type: integer
      default: 0
    limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
      default: 10

  schemas:
    LockInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        operation:
          type: string
        info:
          type: string
        who:
          type: string
        version:
          type: string
        created:
          type: string
          format: date-time
        path:
          type: string

    HealthResponse:
      type: object
      properties:
        status:
          type: string
        errorMessage:
          type: string

    Team:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        usersCount:
          type: integer
        projectsCount:
          type: integer
        description:
          type: string
        members:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    TeamCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        members:
          type: array
          items:
            type: string

    TeamUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        members:
          type: array
          items:
            type: string

    Project:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        team:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
        envCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProjectCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string

    ProjectUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        team_id:
          type: integer

    Environment:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        username:
          type: string
        isLocked:
          type: boolean
        stateVersion:
          type: integer
        project:
          type: object
          properties:
            id:
              type: string
        secret:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    EnvironmentCreate:
      type: object
      properties:
        name:
          type: string
        username:
          type: string
        secret:
          type: string

    EnvironmentUpdate:
      type: object
      properties:
        name:
          type: string
        username:
          type: string
        secret:
          type: string

    Snapshot:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        record_type:
          type: string
        record_uuid:
          type: string
        status:
          type: string
        team:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    SnapshotCreate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        state_id:
          type: string
          format: uuid

    SnapshotUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        team_id:
          type: integer

    ErrorResponse:
      type: object
      properties:
        errorMessage:
          type: string

    Payload:
      type: object
      format: binary

  securitySchemes:
    openId:
      type: http
      scheme: bearer # using bearer token
      bearerFormat: JWT
    basicAuth:
      type: http
      scheme: basic
