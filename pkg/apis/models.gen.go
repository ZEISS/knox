// Package apis provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package apis

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Api_keyScopes    = "api_key.Scopes"
	Basic_authScopes = "basic_auth.Scopes"
)

// Environment defines model for Environment.
type Environment struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Id        *string    `json:"id,omitempty"`
	IsLocked  *bool      `json:"isLocked,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Project   *struct {
		Id *string `json:"id,omitempty"`
	} `json:"project,omitempty"`
	Secret       *string    `json:"secret,omitempty"`
	Slug         *string    `json:"slug,omitempty"`
	StateVersion *int       `json:"stateVersion,omitempty"`
	UpdatedAt    *time.Time `json:"updatedAt,omitempty"`
	Username     *string    `json:"username,omitempty"`
}

// EnvironmentCreate defines model for EnvironmentCreate.
type EnvironmentCreate struct {
	Name     *string `json:"name,omitempty"`
	Secret   *string `json:"secret,omitempty"`
	Slug     *string `json:"slug,omitempty"`
	Username *string `json:"username,omitempty"`
}

// EnvironmentUpdate defines model for EnvironmentUpdate.
type EnvironmentUpdate struct {
	Name     *string `json:"name,omitempty"`
	Secret   *string `json:"secret,omitempty"`
	Slug     *string `json:"slug,omitempty"`
	Username *string `json:"username,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	ErrorMessage *string `json:"errorMessage,omitempty"`
	Status       *string `json:"status,omitempty"`
}

// LockInfo defines model for LockInfo.
type LockInfo struct {
	Created   *time.Time          `json:"created,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Info      *string             `json:"info,omitempty"`
	Operation *string             `json:"operation,omitempty"`
	Path      *string             `json:"path,omitempty"`
	Version   *string             `json:"version,omitempty"`
	Who       *string             `json:"who,omitempty"`
}

// Payload defines model for Payload.
type Payload = openapi_types.File

// Project defines model for Project.
type Project struct {
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	Description *string    `json:"description,omitempty"`
	EnvCount    *int       `json:"envCount,omitempty"`
	Id          *string    `json:"id,omitempty"`
	Name        *string    `json:"name,omitempty"`
	Slug        *string    `json:"slug,omitempty"`
	Team        *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
		Slug *string `json:"slug,omitempty"`
	} `json:"team,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// ProjectCreate defines model for ProjectCreate.
type ProjectCreate struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	Slug        *string `json:"slug,omitempty"`
	TeamId      *int    `json:"team_id,omitempty"`
}

// ProjectUpdate defines model for ProjectUpdate.
type ProjectUpdate struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	Slug        *string `json:"slug,omitempty"`
	TeamId      *int    `json:"team_id,omitempty"`
}

// Snapshot defines model for Snapshot.
type Snapshot struct {
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          *string    `json:"id,omitempty"`
	RecordType  *string    `json:"record_type,omitempty"`
	RecordUuid  *string    `json:"record_uuid,omitempty"`
	Status      *string    `json:"status,omitempty"`
	Team        *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
		Slug *string `json:"slug,omitempty"`
	} `json:"team,omitempty"`
	Title     *string    `json:"title,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// SnapshotCreate defines model for SnapshotCreate.
type SnapshotCreate struct {
	Description *string `json:"description,omitempty"`
	RecordType  *string `json:"record_type,omitempty"`
	RecordUuid  *string `json:"record_uuid,omitempty"`
	TeamId      *int    `json:"team_id,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// SnapshotUpdate defines model for SnapshotUpdate.
type SnapshotUpdate struct {
	Description *string `json:"description,omitempty"`
	TeamId      *int    `json:"team_id,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// Task defines model for Task.
type Task struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Id        *string    `json:"id,omitempty"`
	RunAt     *time.Time `json:"runAt,omitempty"`
	Status    *string    `json:"status,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// Team defines model for Team.
type Team struct {
	CreatedAt     *time.Time `json:"createdAt,omitempty"`
	Description   *string    `json:"description,omitempty"`
	Id            *string    `json:"id,omitempty"`
	Members       *[]string  `json:"members,omitempty"`
	Name          *string    `json:"name,omitempty"`
	ProjectsCount *int       `json:"projectsCount,omitempty"`
	Slug          *string    `json:"slug,omitempty"`
	UpdatedAt     *time.Time `json:"updatedAt,omitempty"`
	UsersCount    *int       `json:"usersCount,omitempty"`
}

// TeamCreate defines model for TeamCreate.
type TeamCreate struct {
	Description *string   `json:"description,omitempty"`
	Members     *[]string `json:"members,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Slug        *string   `json:"slug,omitempty"`
}

// TeamUpdate defines model for TeamUpdate.
type TeamUpdate struct {
	Description *string   `json:"description,omitempty"`
	Members     *[]string `json:"members,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Slug        *string   `json:"slug,omitempty"`
}

// User defines model for User.
type User struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Email     *string    `json:"email,omitempty"`
	Id        *string    `json:"id,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Role      *string    `json:"role,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
	Email    *string `json:"email,omitempty"`
	Name     *string `json:"name,omitempty"`
	Password *string `json:"password,omitempty"`
	Role     *string `json:"role,omitempty"`
}

// UserUpdate defines model for UserUpdate.
type UserUpdate struct {
	Email    *string `json:"email,omitempty"`
	Name     *string `json:"name,omitempty"`
	Password *string `json:"password,omitempty"`
	Role     *string `json:"role,omitempty"`
}

// EnvironmentId defines model for environmentId.
type EnvironmentId = string

// ProjectId defines model for projectId.
type ProjectId = string

// TeamId defines model for teamId.
type TeamId = string

// GetApiV1ProjectParams defines parameters for GetApiV1Project.
type GetApiV1ProjectParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiV1ProjectProjectIdEnvironmentParams defines parameters for GetApiV1ProjectProjectIdEnvironment.
type GetApiV1ProjectProjectIdEnvironmentParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiV1SnapshotParams defines parameters for GetApiV1Snapshot.
type GetApiV1SnapshotParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiV1TeamParams defines parameters for GetApiV1Team.
type GetApiV1TeamParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiV1UserParams defines parameters for GetApiV1User.
type GetApiV1UserParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostApiV1ProjectJSONRequestBody defines body for PostApiV1Project for application/json ContentType.
type PostApiV1ProjectJSONRequestBody = ProjectCreate

// PutApiV1ProjectIdJSONRequestBody defines body for PutApiV1ProjectId for application/json ContentType.
type PutApiV1ProjectIdJSONRequestBody = ProjectUpdate

// PostApiV1ProjectProjectIdEnvironmentJSONRequestBody defines body for PostApiV1ProjectProjectIdEnvironment for application/json ContentType.
type PostApiV1ProjectProjectIdEnvironmentJSONRequestBody = EnvironmentCreate

// PutApiV1ProjectProjectIdEnvironmentEnvironmentIdJSONRequestBody defines body for PutApiV1ProjectProjectIdEnvironmentEnvironmentId for application/json ContentType.
type PutApiV1ProjectProjectIdEnvironmentEnvironmentIdJSONRequestBody = EnvironmentUpdate

// PostApiV1SnapshotJSONRequestBody defines body for PostApiV1Snapshot for application/json ContentType.
type PostApiV1SnapshotJSONRequestBody = SnapshotCreate

// PutApiV1SnapshotIdJSONRequestBody defines body for PutApiV1SnapshotId for application/json ContentType.
type PutApiV1SnapshotIdJSONRequestBody = SnapshotUpdate

// PostApiV1TeamJSONRequestBody defines body for PostApiV1Team for application/json ContentType.
type PostApiV1TeamJSONRequestBody = TeamCreate

// PutApiV1TeamIdJSONRequestBody defines body for PutApiV1TeamId for application/json ContentType.
type PutApiV1TeamIdJSONRequestBody = TeamUpdate

// PostApiV1UserJSONRequestBody defines body for PostApiV1User for application/json ContentType.
type PostApiV1UserJSONRequestBody = UserCreate

// PutApiV1UserIdJSONRequestBody defines body for PutApiV1UserId for application/json ContentType.
type PutApiV1UserIdJSONRequestBody = UserUpdate

// LockEnvironmentJSONRequestBody defines body for LockEnvironment for application/json ContentType.
type LockEnvironmentJSONRequestBody = LockInfo

// UpdateEnvironmentStateJSONRequestBody defines body for UpdateEnvironmentState for application/json ContentType.
type UpdateEnvironmentStateJSONRequestBody = Payload

// UnlockEnvironmentJSONRequestBody defines body for UnlockEnvironment for application/json ContentType.
type UnlockEnvironmentJSONRequestBody = LockInfo

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
