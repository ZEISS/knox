// Package apis provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package apis

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BasicAuthScopes = "BasicAuth.Scopes"
	OpenIDScopes    = "OpenID.Scopes"
)

// Environment defines model for Environment.
type Environment struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Id        *string    `json:"id,omitempty"`
	IsLocked  *bool      `json:"isLocked,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Project   *struct {
		Id *string `json:"id,omitempty"`
	} `json:"project,omitempty"`
	Secret       *string    `json:"secret,omitempty"`
	StateVersion *int       `json:"stateVersion,omitempty"`
	UpdatedAt    *time.Time `json:"updatedAt,omitempty"`
	Username     *string    `json:"username,omitempty"`
}

// EnvironmentCreate defines model for EnvironmentCreate.
type EnvironmentCreate struct {
	Name     *string `json:"name,omitempty"`
	Secret   *string `json:"secret,omitempty"`
	Username *string `json:"username,omitempty"`
}

// EnvironmentUpdate defines model for EnvironmentUpdate.
type EnvironmentUpdate struct {
	Name     *string `json:"name,omitempty"`
	Secret   *string `json:"secret,omitempty"`
	Username *string `json:"username,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	ErrorMessage *string `json:"errorMessage,omitempty"`
	Status       *string `json:"status,omitempty"`
}

// LockInfo defines model for LockInfo.
type LockInfo struct {
	Created   *time.Time          `json:"created,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Info      *string             `json:"info,omitempty"`
	Operation *string             `json:"operation,omitempty"`
	Path      *string             `json:"path,omitempty"`
	Version   *string             `json:"version,omitempty"`
	Who       *string             `json:"who,omitempty"`
}

// Payload defines model for Payload.
type Payload = map[string]interface{}

// Project defines model for Project.
type Project struct {
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	Description *string    `json:"description,omitempty"`
	EnvCount    *int       `json:"envCount,omitempty"`
	Id          *string    `json:"id,omitempty"`
	Name        *string    `json:"name,omitempty"`
	Team        *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
		Slug *string `json:"slug,omitempty"`
	} `json:"team,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// ProjectCreate defines model for ProjectCreate.
type ProjectCreate struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	TeamId      *int    `json:"team_id,omitempty"`
}

// ProjectUpdate defines model for ProjectUpdate.
type ProjectUpdate struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	TeamId      *int    `json:"team_id,omitempty"`
}

// Snapshot defines model for Snapshot.
type Snapshot struct {
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          *string    `json:"id,omitempty"`
	RecordType  *string    `json:"record_type,omitempty"`
	RecordUuid  *string    `json:"record_uuid,omitempty"`
	Status      *string    `json:"status,omitempty"`
	Team        *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
		Slug *string `json:"slug,omitempty"`
	} `json:"team,omitempty"`
	Title     *string    `json:"title,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// SnapshotCreate defines model for SnapshotCreate.
type SnapshotCreate struct {
	Description *string             `json:"description,omitempty"`
	StateId     *openapi_types.UUID `json:"state_id,omitempty"`
	Title       *string             `json:"title,omitempty"`
}

// SnapshotUpdate defines model for SnapshotUpdate.
type SnapshotUpdate struct {
	Description *string `json:"description,omitempty"`
	TeamId      *int    `json:"team_id,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// Team defines model for Team.
type Team struct {
	CreatedAt     *time.Time `json:"createdAt,omitempty"`
	Description   *string    `json:"description,omitempty"`
	Id            *string    `json:"id,omitempty"`
	Members       *[]string  `json:"members,omitempty"`
	Name          *string    `json:"name,omitempty"`
	ProjectsCount *int       `json:"projectsCount,omitempty"`
	Slug          *string    `json:"slug,omitempty"`
	UpdatedAt     *time.Time `json:"updatedAt,omitempty"`
	UsersCount    *int       `json:"usersCount,omitempty"`
}

// TeamCreate defines model for TeamCreate.
type TeamCreate struct {
	Description *string   `json:"description,omitempty"`
	Members     *[]string `json:"members,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Slug        *string   `json:"slug,omitempty"`
}

// TeamUpdate defines model for TeamUpdate.
type TeamUpdate struct {
	Description *string   `json:"description,omitempty"`
	Members     *[]string `json:"members,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Slug        *string   `json:"slug,omitempty"`
}

// User defines model for User.
type User struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Email     *string    `json:"email,omitempty"`
	Id        *string    `json:"id,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Role      *string    `json:"role,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
	Email    *string `json:"email,omitempty"`
	Name     *string `json:"name,omitempty"`
	Password *string `json:"password,omitempty"`
	Role     *string `json:"role,omitempty"`
}

// UserUpdate defines model for UserUpdate.
type UserUpdate struct {
	Email    *string `json:"email,omitempty"`
	Name     *string `json:"name,omitempty"`
	Password *string `json:"password,omitempty"`
	Role     *string `json:"role,omitempty"`
}

// EnvironmentId defines model for environmentId.
type EnvironmentId = string

// Limit defines model for limit.
type Limit = int

// Offset defines model for offset.
type Offset = int

// ProjectId defines model for projectId.
type ProjectId = string

// SnapshotId defines model for snapshotId.
type SnapshotId = string

// TeamId defines model for teamId.
type TeamId = string

// GetTeamsParams defines parameters for GetTeams.
type GetTeamsParams struct {
	Limit  *Limit  `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetProjectsParams defines parameters for GetProjects.
type GetProjectsParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetEnvironmentsParams defines parameters for GetEnvironments.
type GetEnvironmentsParams struct {
	Limit  *Limit  `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetSnapshotsParams defines parameters for GetSnapshots.
type GetSnapshotsParams struct {
	Limit  *Limit  `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	Limit  *Limit  `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// LockEnvironmentJSONRequestBody defines body for LockEnvironment for application/json ContentType.
type LockEnvironmentJSONRequestBody = LockInfo

// UpdateEnvironmentStateJSONRequestBody defines body for UpdateEnvironmentState for application/json ContentType.
type UpdateEnvironmentStateJSONRequestBody = Payload

// UnlockEnvironmentJSONRequestBody defines body for UnlockEnvironment for application/json ContentType.
type UnlockEnvironmentJSONRequestBody = LockInfo

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = TeamCreate

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = TeamUpdate

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody = ProjectCreate

// UpdateProjectJSONRequestBody defines body for UpdateProject for application/json ContentType.
type UpdateProjectJSONRequestBody = ProjectUpdate

// CreateEnvironmentJSONRequestBody defines body for CreateEnvironment for application/json ContentType.
type CreateEnvironmentJSONRequestBody = EnvironmentCreate

// UpdateEnvironmentJSONRequestBody defines body for UpdateEnvironment for application/json ContentType.
type UpdateEnvironmentJSONRequestBody = EnvironmentUpdate

// CreateSnapshotJSONRequestBody defines body for CreateSnapshot for application/json ContentType.
type CreateSnapshotJSONRequestBody = SnapshotCreate

// PostUserJSONRequestBody defines body for PostUser for application/json ContentType.
type PostUserJSONRequestBody = UserCreate

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UserUpdate

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Jdpeb/8KAAD//wpL6bA/YgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
