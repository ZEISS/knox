// Package apis provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package apis

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Api_keyScopes    = "api_key.Scopes"
	Basic_authScopes = "basic_auth.Scopes"
)

// Environment defines model for Environment.
type Environment struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Id        *string    `json:"id,omitempty"`
	IsLocked  *bool      `json:"isLocked,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Project   *struct {
		Id *string `json:"id,omitempty"`
	} `json:"project,omitempty"`
	Secret       *string    `json:"secret,omitempty"`
	Slug         *string    `json:"slug,omitempty"`
	StateVersion *int       `json:"stateVersion,omitempty"`
	UpdatedAt    *time.Time `json:"updatedAt,omitempty"`
	Username     *string    `json:"username,omitempty"`
}

// EnvironmentCreate defines model for EnvironmentCreate.
type EnvironmentCreate struct {
	Name     *string `json:"name,omitempty"`
	Secret   *string `json:"secret,omitempty"`
	Slug     *string `json:"slug,omitempty"`
	Username *string `json:"username,omitempty"`
}

// EnvironmentUpdate defines model for EnvironmentUpdate.
type EnvironmentUpdate struct {
	Name     *string `json:"name,omitempty"`
	Secret   *string `json:"secret,omitempty"`
	Slug     *string `json:"slug,omitempty"`
	Username *string `json:"username,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	ErrorMessage *string `json:"errorMessage,omitempty"`
	Status       *string `json:"status,omitempty"`
}

// LockInfo defines model for LockInfo.
type LockInfo struct {
	Created   *time.Time          `json:"created,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Info      *string             `json:"info,omitempty"`
	Operation *string             `json:"operation,omitempty"`
	Path      *string             `json:"path,omitempty"`
	Version   *string             `json:"version,omitempty"`
	Who       *string             `json:"who,omitempty"`
}

// Payload defines model for Payload.
type Payload = map[string]interface{}

// Project defines model for Project.
type Project struct {
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	Description *string    `json:"description,omitempty"`
	EnvCount    *int       `json:"envCount,omitempty"`
	Id          *string    `json:"id,omitempty"`
	Name        *string    `json:"name,omitempty"`
	Slug        *string    `json:"slug,omitempty"`
	Team        *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
		Slug *string `json:"slug,omitempty"`
	} `json:"team,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// ProjectCreate defines model for ProjectCreate.
type ProjectCreate struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	Slug        *string `json:"slug,omitempty"`
	TeamId      *int    `json:"team_id,omitempty"`
}

// ProjectUpdate defines model for ProjectUpdate.
type ProjectUpdate struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	Slug        *string `json:"slug,omitempty"`
	TeamId      *int    `json:"team_id,omitempty"`
}

// Snapshot defines model for Snapshot.
type Snapshot struct {
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          *string    `json:"id,omitempty"`
	RecordType  *string    `json:"record_type,omitempty"`
	RecordUuid  *string    `json:"record_uuid,omitempty"`
	Status      *string    `json:"status,omitempty"`
	Team        *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
		Slug *string `json:"slug,omitempty"`
	} `json:"team,omitempty"`
	Title     *string    `json:"title,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// SnapshotCreate defines model for SnapshotCreate.
type SnapshotCreate struct {
	Description *string             `json:"description,omitempty"`
	StateId     *openapi_types.UUID `json:"state_id,omitempty"`
	Title       *string             `json:"title,omitempty"`
}

// SnapshotUpdate defines model for SnapshotUpdate.
type SnapshotUpdate struct {
	Description *string `json:"description,omitempty"`
	TeamId      *int    `json:"team_id,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// Task defines model for Task.
type Task struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Id        *string    `json:"id,omitempty"`
	RunAt     *time.Time `json:"runAt,omitempty"`
	Status    *string    `json:"status,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// Team defines model for Team.
type Team struct {
	CreatedAt     *time.Time `json:"createdAt,omitempty"`
	Description   *string    `json:"description,omitempty"`
	Id            *string    `json:"id,omitempty"`
	Members       *[]string  `json:"members,omitempty"`
	Name          *string    `json:"name,omitempty"`
	ProjectsCount *int       `json:"projectsCount,omitempty"`
	Slug          *string    `json:"slug,omitempty"`
	UpdatedAt     *time.Time `json:"updatedAt,omitempty"`
	UsersCount    *int       `json:"usersCount,omitempty"`
}

// TeamCreate defines model for TeamCreate.
type TeamCreate struct {
	Description *string   `json:"description,omitempty"`
	Members     *[]string `json:"members,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Slug        *string   `json:"slug,omitempty"`
}

// TeamUpdate defines model for TeamUpdate.
type TeamUpdate struct {
	Description *string   `json:"description,omitempty"`
	Members     *[]string `json:"members,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Slug        *string   `json:"slug,omitempty"`
}

// User defines model for User.
type User struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Email     *string    `json:"email,omitempty"`
	Id        *string    `json:"id,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Role      *string    `json:"role,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
	Email    *string `json:"email,omitempty"`
	Name     *string `json:"name,omitempty"`
	Password *string `json:"password,omitempty"`
	Role     *string `json:"role,omitempty"`
}

// UserUpdate defines model for UserUpdate.
type UserUpdate struct {
	Email    *string `json:"email,omitempty"`
	Name     *string `json:"name,omitempty"`
	Password *string `json:"password,omitempty"`
	Role     *string `json:"role,omitempty"`
}

// EnvironmentId defines model for environmentId.
type EnvironmentId = string

// Limit defines model for limit.
type Limit = int

// LockId defines model for lockId.
type LockId = openapi_types.UUID

// Offset defines model for offset.
type Offset = int

// ProjectId defines model for projectId.
type ProjectId = string

// TeamId defines model for teamId.
type TeamId = string

// UpdateEnvironmentStateParams defines parameters for UpdateEnvironmentState.
type UpdateEnvironmentStateParams struct {
	ID *LockId `form:"ID,omitempty" json:"ID,omitempty"`
}

// GetProjectsParams defines parameters for GetProjects.
type GetProjectsParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetEnvironmentsParams defines parameters for GetEnvironments.
type GetEnvironmentsParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetSnapshotsParams defines parameters for GetSnapshots.
type GetSnapshotsParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetTeamsParams defines parameters for GetTeams.
type GetTeamsParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	Limit  *Limit  `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// LockEnvironmentJSONRequestBody defines body for LockEnvironment for application/json ContentType.
type LockEnvironmentJSONRequestBody = LockInfo

// UpdateEnvironmentStateJSONRequestBody defines body for UpdateEnvironmentState for application/json ContentType.
type UpdateEnvironmentStateJSONRequestBody = Payload

// UnlockEnvironmentJSONRequestBody defines body for UnlockEnvironment for application/json ContentType.
type UnlockEnvironmentJSONRequestBody = LockInfo

// PostProjectJSONRequestBody defines body for PostProject for application/json ContentType.
type PostProjectJSONRequestBody = ProjectCreate

// UpdateProjectJSONRequestBody defines body for UpdateProject for application/json ContentType.
type UpdateProjectJSONRequestBody = ProjectUpdate

// PostProjectProjectIdEnvironmentJSONRequestBody defines body for PostProjectProjectIdEnvironment for application/json ContentType.
type PostProjectProjectIdEnvironmentJSONRequestBody = EnvironmentCreate

// UpdateEnvironmentJSONRequestBody defines body for UpdateEnvironment for application/json ContentType.
type UpdateEnvironmentJSONRequestBody = EnvironmentUpdate

// CreateSnapshotJSONRequestBody defines body for CreateSnapshot for application/json ContentType.
type CreateSnapshotJSONRequestBody = SnapshotCreate

// UpdateSnapshotJSONRequestBody defines body for UpdateSnapshot for application/json ContentType.
type UpdateSnapshotJSONRequestBody = SnapshotUpdate

// PostTeamJSONRequestBody defines body for PostTeam for application/json ContentType.
type PostTeamJSONRequestBody = TeamCreate

// PutTeamIdJSONRequestBody defines body for PutTeamId for application/json ContentType.
type PutTeamIdJSONRequestBody = TeamUpdate

// PostUserJSONRequestBody defines body for PostUser for application/json ContentType.
type PostUserJSONRequestBody = UserCreate

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UserUpdate

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xc3W+cuBb/V5DvfaSZSW+vVM3bve1qN2pXivKxL1UUOXAm4wZsapuko4j/fWWbz4AZ",
	"mALJzPKWjME+nPM7H79jwzPyWBgxClQKtHpGEeY4BAlc/wf0kXBGQ6DyzFc/EIpWKMJyg1xEcQho9eIa",
	"F3H4ERMOPlpJHoOLhLeBEKub5TZSNwjJCb1HSeKigIREqiEf1jgOJFqdLl2zyI8Y+LZYxVzZMBuhEu6B",
	"m+mY91CS88UUZ58r968ZD7FEKxTHRMldl46t1wKq4lmkS6/cIV7E2Xfw7JosxvtpUQIOrZOmg31mTLJB",
	"jYHfCvtqgHAWAZcE9KDHAUvw/ycrGvWxhHeShFBXq4uI37Cmi4j4yrwHKA/eMRYApmrUPEzDbanO6pI1",
	"LpPk8rA7fZt6VPC4sXJtchHE980DEkv4C7ggjDYZ20Vx5PdVTCyAW56zSe6SXT5pK9R1YNXaPs+8v3jX",
	"WhdvTDzOGb8AETEqGkQDNfwnCIHvu874B+BAbvae0oAqFh1XU85yRtfM6pJ9HXJHOFRxz6xWG1CLY1n1",
	"hJKDqmjUNPBYc59i7GnDOurhHG8DhqtPcEco1tG5frUtWuwRx3wQHieR9cGBPn5iMZXN8cESBe0uYcO9",
	"iu8do1//6Zs03juyJXZD2ALXLt3up6bbilbKmdkmny1yvbp8lxRHYsOmQbIFTBw8xv1b87t9XMeTXvHu",
	"FUAtiQyaJxkE7pm59sW7rjduOwZq27O0CbYv0Ftg20+QKywexiwveUz7zNKCzUEAcdUI8Ol8N4TwLuV4",
	"REJo8ULzA+Ycb7sU4aIl39nrtv0KZftaNnXv63vDqqpHTFJC7+uXryb0tQA+CLAhxCToA2mr9JyNGdrV",
	"A9ugZX8GuythIZ4Y9/s8iU0sG3heTSxD7WJO5PbS20BoxMERuX2Abd6/2AD2gRcdjJ/vcETeqSsKyEbk",
	"C2jM3mFBvFscG5Kh2xa6daB+Lq7fSBmZxkbOYkxuQl8o+4lKZASdnixPlimtoTgiaIX+c7I8OUWGymiJ",
	"F7cbTfbU3/eGqOYk6MxHK/Q7SEMHdd/FMEJ95/vlUvsDozLtp+AoCoinb118F8adi9bMvzms0Qr9a1F0",
	"6RZpb2bxgnDqx6vEBXS5FRJChwjHyKs19t9XEsFnT9RAIA5Dxc+0mhxhLjACOmnedZHE9wKtvqGv5BEo",
	"CIFu1K2LWw7Y37bp/UJf8EbUrqV1JHOw50EkHcnxek28VzMDZdIuk8006gaibVCY5SL/zdjFCwhQuXg2",
	"3cZk8Zz3MpPFc6VDnCwC5plSj4kGE35l3kO55ehWWtLfmhVRXLJI+52Ju/PKot3a4eJqlzu5Mf1UEPL/",
	"zOBxEEPmXZ1E23A0DJfXqUEl9jwQYh0HDs8R5aIPyw+DLV9tvjXIcAGCxdwDDdg1i6k/tMvsFOGMSuAU",
	"B84l8Efgjr6hksI0Gsv559uNwkXhQ0rLjtyAjmrgsLVzBZxjVWk4UIF45lYl4O/jWXqdtuBYmv9SX/uG",
	"vWsk6GcNwxn5IyJfZY9fAb5rSQ6moj0QFO++Id2vHCublKCezB512B5lkD9pNolpe6V2rcfnWs3uXp2c",
	"4b1xhtlxRnIcjdJfdpzSOQNbcZXuGYm6G3Q70FI5A1Pvaj53PXlSPqxSm+ZXS6tqJykEiX0sG0bykz31",
	"VnBxrKZhy4BJHPRq7Wa950qrszVdpZasNUAb+lVdE9pbdIq8rdZUnGEnIEIqX4gK1Gbwz4FsL8TOmcjw",
	"jkYqXio7xI0x9nToxZq0nQ452bGKQ7O2UaCDHQpPmbGbbV0Kc4tn4icmlgRgKGXV/p/17wUCmgJe9Rwa",
	"6XcGrR6n5iw5FkSMMR3cDg93V+KbBgbLKZx+BtaAmWYHqqLYSvTHBtZoWSvdeRubeM8AHhnAKevGPRJn",
	"iVBD9eR0h6as6AT1Pc+JHzEPgbIKuxKBcuei4TTEq3ObfyYfgao39GwQl3jJeeYlrR2qwdxrpIRSP+U/",
	"MhWqeEXd2KXh46BEfTtAtgj/sn26mz1Ng0t34Je2ZmI2PTGjXXfNOpQYBw215VRhbgbwcKm9M3pbmOAB",
	"A3jUmmAaojk7y5Rkk3avSUTpNSBb7M9e8Zj3pSbdlxK52rvy0fydrnlnSjNBUQJu5gMFmO0c0JT3uTbH",
	"icEv3ugamZQV0GgwfDp2HHRMFGZrsnk56HXcpCoBYd6lOoZdqh0QcXdmwkPbqGr1/hlcw2WenchqYSij",
	"g2u8HDYNiZhRPN12VYcsKrF4yDOoLWLqt7IPLFpqmWeMjRsppQFGBi6l8xxY6avtVkwBDmcuOikXlVrl",
	"XXmo/jbBzEE1B5UpWHOg6//b9x+1/sbJ2KXvGIzMOA0I6upVvx8H05TGTC8tm4WwjuzyKvu83swtj4Fb",
	"WkDhtmazg6uQLL49g2nICsmGpEYOeR7LkSPJOMloGuo4A3Ya2tiSEuP0uz62OHgtFF77vgBoKuAOr/Sl",
	"9fDxleb6W1adS3P9daW5NNeleZwiLkOrQWB7aa71N040LH0HauTS3ICgrl71+3GU5rEx00vLZnGoY2me",
	"GnsuzI+hMLdAwm1NSIdWmNs8ewbTgPnDiqSWzZ1RwTROLpqmMp8RO01lbsuIeiY1tUFkzIP0a4ditVgE",
	"zMPBhgm5+rj8uETJTfJ3AAAA//9x0hNx7mMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
