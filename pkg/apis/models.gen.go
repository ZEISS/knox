// Package apis provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package apis

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
	OpenIdScopes    = "openId.Scopes"
)

// Environment defines model for Environment.
type Environment struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Id        *string    `json:"id,omitempty"`
	IsLocked  *bool      `json:"isLocked,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Project   *struct {
		Id *string `json:"id,omitempty"`
	} `json:"project,omitempty"`
	Secret       *string    `json:"secret,omitempty"`
	StateVersion *int       `json:"stateVersion,omitempty"`
	UpdatedAt    *time.Time `json:"updatedAt,omitempty"`
	Username     *string    `json:"username,omitempty"`
}

// EnvironmentCreate defines model for EnvironmentCreate.
type EnvironmentCreate struct {
	Name     *string `json:"name,omitempty"`
	Secret   *string `json:"secret,omitempty"`
	Username *string `json:"username,omitempty"`
}

// EnvironmentUpdate defines model for EnvironmentUpdate.
type EnvironmentUpdate struct {
	Name     *string `json:"name,omitempty"`
	Secret   *string `json:"secret,omitempty"`
	Username *string `json:"username,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	ErrorMessage *string `json:"errorMessage,omitempty"`
	Status       *string `json:"status,omitempty"`
}

// LockInfo defines model for LockInfo.
type LockInfo struct {
	Created   *time.Time          `json:"created,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Info      *string             `json:"info,omitempty"`
	Operation *string             `json:"operation,omitempty"`
	Path      *string             `json:"path,omitempty"`
	Version   *string             `json:"version,omitempty"`
	Who       *string             `json:"who,omitempty"`
}

// Payload defines model for Payload.
type Payload = map[string]interface{}

// Project defines model for Project.
type Project struct {
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	Description *string    `json:"description,omitempty"`
	EnvCount    *int       `json:"envCount,omitempty"`
	Id          *string    `json:"id,omitempty"`
	Name        *string    `json:"name,omitempty"`
	Team        *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"team,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// ProjectCreate defines model for ProjectCreate.
type ProjectCreate struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// ProjectUpdate defines model for ProjectUpdate.
type ProjectUpdate struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	TeamId      *int    `json:"team_id,omitempty"`
}

// Snapshot defines model for Snapshot.
type Snapshot struct {
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          *string    `json:"id,omitempty"`
	RecordType  *string    `json:"record_type,omitempty"`
	RecordUuid  *string    `json:"record_uuid,omitempty"`
	Status      *string    `json:"status,omitempty"`
	Team        *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"team,omitempty"`
	Title     *string    `json:"title,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// SnapshotCreate defines model for SnapshotCreate.
type SnapshotCreate struct {
	Description *string             `json:"description,omitempty"`
	StateId     *openapi_types.UUID `json:"state_id,omitempty"`
	Title       *string             `json:"title,omitempty"`
}

// SnapshotUpdate defines model for SnapshotUpdate.
type SnapshotUpdate struct {
	Description *string `json:"description,omitempty"`
	TeamId      *int    `json:"team_id,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// Team defines model for Team.
type Team struct {
	CreatedAt     *time.Time `json:"createdAt,omitempty"`
	Description   *string    `json:"description,omitempty"`
	Id            *string    `json:"id,omitempty"`
	Members       *[]string  `json:"members,omitempty"`
	Name          *string    `json:"name,omitempty"`
	ProjectsCount *int       `json:"projectsCount,omitempty"`
	UpdatedAt     *time.Time `json:"updatedAt,omitempty"`
	UsersCount    *int       `json:"usersCount,omitempty"`
}

// TeamCreate defines model for TeamCreate.
type TeamCreate struct {
	Description *string   `json:"description,omitempty"`
	Members     *[]string `json:"members,omitempty"`
	Name        *string   `json:"name,omitempty"`
}

// TeamUpdate defines model for TeamUpdate.
type TeamUpdate struct {
	Description *string   `json:"description,omitempty"`
	Members     *[]string `json:"members,omitempty"`
	Name        *string   `json:"name,omitempty"`
}

// EnvironmentName defines model for environmentName.
type EnvironmentName = string

// Limit defines model for limit.
type Limit = int

// Offset defines model for offset.
type Offset = int

// ProjectName defines model for projectName.
type ProjectName = string

// SnapshotId defines model for snapshotId.
type SnapshotId = openapi_types.UUID

// TeamName defines model for teamName.
type TeamName = string

// GetTeamsParams defines parameters for GetTeams.
type GetTeamsParams struct {
	Limit  *Limit  `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetProjectsParams defines parameters for GetProjects.
type GetProjectsParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetEnvironmentsParams defines parameters for GetEnvironments.
type GetEnvironmentsParams struct {
	Limit  *Limit  `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetSnapshotsParams defines parameters for GetSnapshots.
type GetSnapshotsParams struct {
	Limit  *Limit  `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// LockEnvironmentJSONRequestBody defines body for LockEnvironment for application/json ContentType.
type LockEnvironmentJSONRequestBody = LockInfo

// UpdateEnvironmentStateJSONRequestBody defines body for UpdateEnvironmentState for application/json ContentType.
type UpdateEnvironmentStateJSONRequestBody = Payload

// UnlockEnvironmentJSONRequestBody defines body for UnlockEnvironment for application/json ContentType.
type UnlockEnvironmentJSONRequestBody = LockInfo

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = TeamCreate

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = TeamUpdate

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody = ProjectCreate

// UpdateProjectJSONRequestBody defines body for UpdateProject for application/json ContentType.
type UpdateProjectJSONRequestBody = ProjectUpdate

// CreateEnvironmentJSONRequestBody defines body for CreateEnvironment for application/json ContentType.
type CreateEnvironmentJSONRequestBody = EnvironmentCreate

// UpdateEnvironmentJSONRequestBody defines body for UpdateEnvironment for application/json ContentType.
type UpdateEnvironmentJSONRequestBody = EnvironmentUpdate

// CreateSnapshotJSONRequestBody defines body for CreateSnapshot for application/json ContentType.
type CreateSnapshotJSONRequestBody = SnapshotCreate

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
