// Package apis provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package apis

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Api_keyScopes    = "api_key.Scopes"
	Basic_authScopes = "basic_auth.Scopes"
)

// Environment defines model for Environment.
type Environment struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Id        *string    `json:"id,omitempty"`
	IsLocked  *bool      `json:"isLocked,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Project   *struct {
		Id *string `json:"id,omitempty"`
	} `json:"project,omitempty"`
	Secret       *string    `json:"secret,omitempty"`
	Slug         *string    `json:"slug,omitempty"`
	StateVersion *int       `json:"stateVersion,omitempty"`
	UpdatedAt    *time.Time `json:"updatedAt,omitempty"`
	Username     *string    `json:"username,omitempty"`
}

// EnvironmentCreate defines model for EnvironmentCreate.
type EnvironmentCreate struct {
	Name     *string `json:"name,omitempty"`
	Secret   *string `json:"secret,omitempty"`
	Slug     *string `json:"slug,omitempty"`
	Username *string `json:"username,omitempty"`
}

// EnvironmentUpdate defines model for EnvironmentUpdate.
type EnvironmentUpdate struct {
	Name     *string `json:"name,omitempty"`
	Secret   *string `json:"secret,omitempty"`
	Slug     *string `json:"slug,omitempty"`
	Username *string `json:"username,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	ErrorMessage *string `json:"errorMessage,omitempty"`
	Status       *string `json:"status,omitempty"`
}

// LockInfo defines model for LockInfo.
type LockInfo struct {
	Created   *time.Time          `json:"created,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Info      *string             `json:"info,omitempty"`
	Operation *string             `json:"operation,omitempty"`
	Path      *string             `json:"path,omitempty"`
	Version   *string             `json:"version,omitempty"`
	Who       *string             `json:"who,omitempty"`
}

// Payload defines model for Payload.
type Payload = map[string]interface{}

// Project defines model for Project.
type Project struct {
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	Description *string    `json:"description,omitempty"`
	EnvCount    *int       `json:"envCount,omitempty"`
	Id          *string    `json:"id,omitempty"`
	Name        *string    `json:"name,omitempty"`
	Slug        *string    `json:"slug,omitempty"`
	Team        *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
		Slug *string `json:"slug,omitempty"`
	} `json:"team,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// ProjectCreate defines model for ProjectCreate.
type ProjectCreate struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	Slug        *string `json:"slug,omitempty"`
	TeamId      *int    `json:"team_id,omitempty"`
}

// ProjectUpdate defines model for ProjectUpdate.
type ProjectUpdate struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	Slug        *string `json:"slug,omitempty"`
	TeamId      *int    `json:"team_id,omitempty"`
}

// Snapshot defines model for Snapshot.
type Snapshot struct {
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          *string    `json:"id,omitempty"`
	RecordType  *string    `json:"record_type,omitempty"`
	RecordUuid  *string    `json:"record_uuid,omitempty"`
	Status      *string    `json:"status,omitempty"`
	Team        *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
		Slug *string `json:"slug,omitempty"`
	} `json:"team,omitempty"`
	Title     *string    `json:"title,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// SnapshotCreate defines model for SnapshotCreate.
type SnapshotCreate struct {
	Description *string `json:"description,omitempty"`
	RecordType  *string `json:"record_type,omitempty"`
	RecordUuid  *string `json:"record_uuid,omitempty"`
	TeamId      *int    `json:"team_id,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// SnapshotUpdate defines model for SnapshotUpdate.
type SnapshotUpdate struct {
	Description *string `json:"description,omitempty"`
	TeamId      *int    `json:"team_id,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// Task defines model for Task.
type Task struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Id        *string    `json:"id,omitempty"`
	RunAt     *time.Time `json:"runAt,omitempty"`
	Status    *string    `json:"status,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// Team defines model for Team.
type Team struct {
	CreatedAt     *time.Time `json:"createdAt,omitempty"`
	Description   *string    `json:"description,omitempty"`
	Id            *string    `json:"id,omitempty"`
	Members       *[]string  `json:"members,omitempty"`
	Name          *string    `json:"name,omitempty"`
	ProjectsCount *int       `json:"projectsCount,omitempty"`
	Slug          *string    `json:"slug,omitempty"`
	UpdatedAt     *time.Time `json:"updatedAt,omitempty"`
	UsersCount    *int       `json:"usersCount,omitempty"`
}

// TeamCreate defines model for TeamCreate.
type TeamCreate struct {
	Description *string   `json:"description,omitempty"`
	Members     *[]string `json:"members,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Slug        *string   `json:"slug,omitempty"`
}

// TeamUpdate defines model for TeamUpdate.
type TeamUpdate struct {
	Description *string   `json:"description,omitempty"`
	Members     *[]string `json:"members,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Slug        *string   `json:"slug,omitempty"`
}

// User defines model for User.
type User struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Email     *string    `json:"email,omitempty"`
	Id        *string    `json:"id,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Role      *string    `json:"role,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
	Email    *string `json:"email,omitempty"`
	Name     *string `json:"name,omitempty"`
	Password *string `json:"password,omitempty"`
	Role     *string `json:"role,omitempty"`
}

// UserUpdate defines model for UserUpdate.
type UserUpdate struct {
	Email    *string `json:"email,omitempty"`
	Name     *string `json:"name,omitempty"`
	Password *string `json:"password,omitempty"`
	Role     *string `json:"role,omitempty"`
}

// EnvironmentId defines model for environmentId.
type EnvironmentId = string

// LockId defines model for lockId.
type LockId = openapi_types.UUID

// ProjectId defines model for projectId.
type ProjectId = string

// TeamId defines model for teamId.
type TeamId = string

// GetApiV1ProjectParams defines parameters for GetApiV1Project.
type GetApiV1ProjectParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiV1ProjectProjectIdEnvironmentParams defines parameters for GetApiV1ProjectProjectIdEnvironment.
type GetApiV1ProjectProjectIdEnvironmentParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiV1SnapshotParams defines parameters for GetApiV1Snapshot.
type GetApiV1SnapshotParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiV1TeamParams defines parameters for GetApiV1Team.
type GetApiV1TeamParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiV1UserParams defines parameters for GetApiV1User.
type GetApiV1UserParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// UpdateEnvironmentStateParams defines parameters for UpdateEnvironmentState.
type UpdateEnvironmentStateParams struct {
	ID *LockId `form:"ID,omitempty" json:"ID,omitempty"`
}

// PostApiV1ProjectJSONRequestBody defines body for PostApiV1Project for application/json ContentType.
type PostApiV1ProjectJSONRequestBody = ProjectCreate

// PutApiV1ProjectIdJSONRequestBody defines body for PutApiV1ProjectId for application/json ContentType.
type PutApiV1ProjectIdJSONRequestBody = ProjectUpdate

// PostApiV1ProjectProjectIdEnvironmentJSONRequestBody defines body for PostApiV1ProjectProjectIdEnvironment for application/json ContentType.
type PostApiV1ProjectProjectIdEnvironmentJSONRequestBody = EnvironmentCreate

// PutApiV1ProjectProjectIdEnvironmentEnvironmentIdJSONRequestBody defines body for PutApiV1ProjectProjectIdEnvironmentEnvironmentId for application/json ContentType.
type PutApiV1ProjectProjectIdEnvironmentEnvironmentIdJSONRequestBody = EnvironmentUpdate

// PostApiV1SnapshotJSONRequestBody defines body for PostApiV1Snapshot for application/json ContentType.
type PostApiV1SnapshotJSONRequestBody = SnapshotCreate

// PutApiV1SnapshotIdJSONRequestBody defines body for PutApiV1SnapshotId for application/json ContentType.
type PutApiV1SnapshotIdJSONRequestBody = SnapshotUpdate

// PostApiV1TeamJSONRequestBody defines body for PostApiV1Team for application/json ContentType.
type PostApiV1TeamJSONRequestBody = TeamCreate

// PutApiV1TeamIdJSONRequestBody defines body for PutApiV1TeamId for application/json ContentType.
type PutApiV1TeamIdJSONRequestBody = TeamUpdate

// PostApiV1UserJSONRequestBody defines body for PostApiV1User for application/json ContentType.
type PostApiV1UserJSONRequestBody = UserCreate

// PutApiV1UserIdJSONRequestBody defines body for PutApiV1UserId for application/json ContentType.
type PutApiV1UserIdJSONRequestBody = UserUpdate

// LockEnvironmentJSONRequestBody defines body for LockEnvironment for application/json ContentType.
type LockEnvironmentJSONRequestBody = LockInfo

// UpdateEnvironmentStateJSONRequestBody defines body for UpdateEnvironmentState for application/json ContentType.
type UpdateEnvironmentStateJSONRequestBody = Payload

// UnlockEnvironmentJSONRequestBody defines body for UnlockEnvironment for application/json ContentType.
type UnlockEnvironmentJSONRequestBody = LockInfo

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
