// Package apis provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package apis

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
	OpenIdScopes    = "openId.Scopes"
)

// Environment defines model for Environment.
type Environment struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Id        *string    `json:"id,omitempty"`
	IsLocked  *bool      `json:"isLocked,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Project   *struct {
		Id *string `json:"id,omitempty"`
	} `json:"project,omitempty"`
	Secret       *string    `json:"secret,omitempty"`
	StateVersion *int       `json:"stateVersion,omitempty"`
	UpdatedAt    *time.Time `json:"updatedAt,omitempty"`
	Username     *string    `json:"username,omitempty"`
}

// EnvironmentCreate defines model for EnvironmentCreate.
type EnvironmentCreate struct {
	Name     *string `json:"name,omitempty"`
	Secret   *string `json:"secret,omitempty"`
	Username *string `json:"username,omitempty"`
}

// EnvironmentUpdate defines model for EnvironmentUpdate.
type EnvironmentUpdate struct {
	Name     *string `json:"name,omitempty"`
	Secret   *string `json:"secret,omitempty"`
	Username *string `json:"username,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	ErrorMessage *string `json:"errorMessage,omitempty"`
	Status       *string `json:"status,omitempty"`
}

// LockInfo defines model for LockInfo.
type LockInfo struct {
	Created   *time.Time          `json:"created,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Info      *string             `json:"info,omitempty"`
	Operation *string             `json:"operation,omitempty"`
	Path      *string             `json:"path,omitempty"`
	Version   *string             `json:"version,omitempty"`
	Who       *string             `json:"who,omitempty"`
}

// Payload defines model for Payload.
type Payload = map[string]interface{}

// Project defines model for Project.
type Project struct {
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	Description *string    `json:"description,omitempty"`
	EnvCount    *int       `json:"envCount,omitempty"`
	Id          *string    `json:"id,omitempty"`
	Name        *string    `json:"name,omitempty"`
	Team        *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"team,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// ProjectCreate defines model for ProjectCreate.
type ProjectCreate struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// ProjectUpdate defines model for ProjectUpdate.
type ProjectUpdate struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	TeamId      *int    `json:"team_id,omitempty"`
}

// Snapshot defines model for Snapshot.
type Snapshot struct {
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          *string    `json:"id,omitempty"`
	RecordType  *string    `json:"record_type,omitempty"`
	RecordUuid  *string    `json:"record_uuid,omitempty"`
	Status      *string    `json:"status,omitempty"`
	Team        *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"team,omitempty"`
	Title     *string    `json:"title,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// SnapshotCreate defines model for SnapshotCreate.
type SnapshotCreate struct {
	Description *string             `json:"description,omitempty"`
	StateId     *openapi_types.UUID `json:"state_id,omitempty"`
	Title       *string             `json:"title,omitempty"`
}

// SnapshotUpdate defines model for SnapshotUpdate.
type SnapshotUpdate struct {
	Description *string `json:"description,omitempty"`
	TeamId      *int    `json:"team_id,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// Team defines model for Team.
type Team struct {
	CreatedAt     *time.Time `json:"createdAt,omitempty"`
	Description   *string    `json:"description,omitempty"`
	Id            *string    `json:"id,omitempty"`
	Members       *[]string  `json:"members,omitempty"`
	Name          *string    `json:"name,omitempty"`
	ProjectsCount *int       `json:"projectsCount,omitempty"`
	UpdatedAt     *time.Time `json:"updatedAt,omitempty"`
	UsersCount    *int       `json:"usersCount,omitempty"`
}

// TeamCreate defines model for TeamCreate.
type TeamCreate struct {
	Description *string   `json:"description,omitempty"`
	Members     *[]string `json:"members,omitempty"`
	Name        *string   `json:"name,omitempty"`
}

// TeamUpdate defines model for TeamUpdate.
type TeamUpdate struct {
	Description *string   `json:"description,omitempty"`
	Members     *[]string `json:"members,omitempty"`
	Name        *string   `json:"name,omitempty"`
}

// EnvironmentName defines model for environmentName.
type EnvironmentName = string

// Limit defines model for limit.
type Limit = int

// Offset defines model for offset.
type Offset = int

// ProjectName defines model for projectName.
type ProjectName = string

// SnapshotId defines model for snapshotId.
type SnapshotId = openapi_types.UUID

// TeamName defines model for teamName.
type TeamName = string

// GetTeamsParams defines parameters for GetTeams.
type GetTeamsParams struct {
	Limit  *Limit  `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetProjectsParams defines parameters for GetProjects.
type GetProjectsParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetEnvironmentsParams defines parameters for GetEnvironments.
type GetEnvironmentsParams struct {
	Limit  *Limit  `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetSnapshotsParams defines parameters for GetSnapshots.
type GetSnapshotsParams struct {
	Limit  *Limit  `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
}

// LockEnvironmentJSONRequestBody defines body for LockEnvironment for application/json ContentType.
type LockEnvironmentJSONRequestBody = LockInfo

// UpdateEnvironmentStateJSONRequestBody defines body for UpdateEnvironmentState for application/json ContentType.
type UpdateEnvironmentStateJSONRequestBody = Payload

// UnlockEnvironmentJSONRequestBody defines body for UnlockEnvironment for application/json ContentType.
type UnlockEnvironmentJSONRequestBody = LockInfo

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = TeamCreate

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody = TeamUpdate

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody = ProjectCreate

// UpdateProjectJSONRequestBody defines body for UpdateProject for application/json ContentType.
type UpdateProjectJSONRequestBody = ProjectUpdate

// CreateEnvironmentJSONRequestBody defines body for CreateEnvironment for application/json ContentType.
type CreateEnvironmentJSONRequestBody = EnvironmentCreate

// UpdateEnvironmentJSONRequestBody defines body for UpdateEnvironment for application/json ContentType.
type UpdateEnvironmentJSONRequestBody = EnvironmentUpdate

// CreateSnapshotJSONRequestBody defines body for CreateSnapshot for application/json ContentType.
type CreateSnapshotJSONRequestBody = SnapshotCreate

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAAA//+OUvU6Z1sAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
