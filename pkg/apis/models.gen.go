// Package apis provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package apis

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
)

const (
	Api_keyScopes = "api_key.Scopes"
)

// Environment defines model for Environment.
type Environment struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Id        *string    `json:"id,omitempty"`
	IsLocked  *bool      `json:"isLocked,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Project   *struct {
		Id *string `json:"id,omitempty"`
	} `json:"project,omitempty"`
	Secret       *string    `json:"secret,omitempty"`
	Slug         *string    `json:"slug,omitempty"`
	StateVersion *int       `json:"stateVersion,omitempty"`
	UpdatedAt    *time.Time `json:"updatedAt,omitempty"`
	Username     *string    `json:"username,omitempty"`
}

// EnvironmentCreate defines model for EnvironmentCreate.
type EnvironmentCreate struct {
	Name     *string `json:"name,omitempty"`
	Secret   *string `json:"secret,omitempty"`
	Slug     *string `json:"slug,omitempty"`
	Username *string `json:"username,omitempty"`
}

// EnvironmentUpdate defines model for EnvironmentUpdate.
type EnvironmentUpdate struct {
	Name     *string `json:"name,omitempty"`
	Secret   *string `json:"secret,omitempty"`
	Slug     *string `json:"slug,omitempty"`
	Username *string `json:"username,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	ErrorMessage *string `json:"errorMessage,omitempty"`
	Status       *string `json:"status,omitempty"`
}

// Project defines model for Project.
type Project struct {
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	Description *string    `json:"description,omitempty"`
	EnvCount    *int       `json:"envCount,omitempty"`
	Id          *string    `json:"id,omitempty"`
	Name        *string    `json:"name,omitempty"`
	Slug        *string    `json:"slug,omitempty"`
	Team        *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
		Slug *string `json:"slug,omitempty"`
	} `json:"team,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// ProjectCreate defines model for ProjectCreate.
type ProjectCreate struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	Slug        *string `json:"slug,omitempty"`
	TeamId      *int    `json:"team_id,omitempty"`
}

// ProjectUpdate defines model for ProjectUpdate.
type ProjectUpdate struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	Slug        *string `json:"slug,omitempty"`
	TeamId      *int    `json:"team_id,omitempty"`
}

// Snapshot defines model for Snapshot.
type Snapshot struct {
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          *string    `json:"id,omitempty"`
	RecordType  *string    `json:"record_type,omitempty"`
	RecordUuid  *string    `json:"record_uuid,omitempty"`
	Status      *string    `json:"status,omitempty"`
	Team        *struct {
		Id   *string `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
		Slug *string `json:"slug,omitempty"`
	} `json:"team,omitempty"`
	Title     *string    `json:"title,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// SnapshotCreate defines model for SnapshotCreate.
type SnapshotCreate struct {
	Description *string `json:"description,omitempty"`
	RecordType  *string `json:"record_type,omitempty"`
	RecordUuid  *string `json:"record_uuid,omitempty"`
	TeamId      *int    `json:"team_id,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// SnapshotUpdate defines model for SnapshotUpdate.
type SnapshotUpdate struct {
	Description *string `json:"description,omitempty"`
	TeamId      *int    `json:"team_id,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// Task defines model for Task.
type Task struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Id        *string    `json:"id,omitempty"`
	RunAt     *time.Time `json:"runAt,omitempty"`
	Status    *string    `json:"status,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// Team defines model for Team.
type Team struct {
	CreatedAt     *time.Time `json:"createdAt,omitempty"`
	Description   *string    `json:"description,omitempty"`
	Id            *string    `json:"id,omitempty"`
	Members       *[]string  `json:"members,omitempty"`
	Name          *string    `json:"name,omitempty"`
	ProjectsCount *int       `json:"projectsCount,omitempty"`
	Slug          *string    `json:"slug,omitempty"`
	UpdatedAt     *time.Time `json:"updatedAt,omitempty"`
	UsersCount    *int       `json:"usersCount,omitempty"`
}

// TeamCreate defines model for TeamCreate.
type TeamCreate struct {
	Description *string   `json:"description,omitempty"`
	Members     *[]string `json:"members,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Slug        *string   `json:"slug,omitempty"`
}

// TeamUpdate defines model for TeamUpdate.
type TeamUpdate struct {
	Description *string   `json:"description,omitempty"`
	Members     *[]string `json:"members,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Slug        *string   `json:"slug,omitempty"`
}

// User defines model for User.
type User struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Email     *string    `json:"email,omitempty"`
	Id        *string    `json:"id,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Role      *string    `json:"role,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
	Email    *string `json:"email,omitempty"`
	Name     *string `json:"name,omitempty"`
	Password *string `json:"password,omitempty"`
	Role     *string `json:"role,omitempty"`
}

// UserUpdate defines model for UserUpdate.
type UserUpdate struct {
	Email    *string `json:"email,omitempty"`
	Name     *string `json:"name,omitempty"`
	Password *string `json:"password,omitempty"`
	Role     *string `json:"role,omitempty"`
}

// GetApiV1ProjectParams defines parameters for GetApiV1Project.
type GetApiV1ProjectParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiV1ProjectProjectIdEnvironmentParams defines parameters for GetApiV1ProjectProjectIdEnvironment.
type GetApiV1ProjectProjectIdEnvironmentParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiV1SnapshotParams defines parameters for GetApiV1Snapshot.
type GetApiV1SnapshotParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiV1TeamParams defines parameters for GetApiV1Team.
type GetApiV1TeamParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiV1UserParams defines parameters for GetApiV1User.
type GetApiV1UserParams struct {
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostApiV1ProjectJSONRequestBody defines body for PostApiV1Project for application/json ContentType.
type PostApiV1ProjectJSONRequestBody = ProjectCreate

// PutApiV1ProjectIdJSONRequestBody defines body for PutApiV1ProjectId for application/json ContentType.
type PutApiV1ProjectIdJSONRequestBody = ProjectUpdate

// PostApiV1ProjectProjectIdEnvironmentJSONRequestBody defines body for PostApiV1ProjectProjectIdEnvironment for application/json ContentType.
type PostApiV1ProjectProjectIdEnvironmentJSONRequestBody = EnvironmentCreate

// PutApiV1ProjectProjectIdEnvironmentEnvironmentIdJSONRequestBody defines body for PutApiV1ProjectProjectIdEnvironmentEnvironmentId for application/json ContentType.
type PutApiV1ProjectProjectIdEnvironmentEnvironmentIdJSONRequestBody = EnvironmentUpdate

// PostApiV1SnapshotJSONRequestBody defines body for PostApiV1Snapshot for application/json ContentType.
type PostApiV1SnapshotJSONRequestBody = SnapshotCreate

// PutApiV1SnapshotIdJSONRequestBody defines body for PutApiV1SnapshotId for application/json ContentType.
type PutApiV1SnapshotIdJSONRequestBody = SnapshotUpdate

// PostApiV1TeamJSONRequestBody defines body for PostApiV1Team for application/json ContentType.
type PostApiV1TeamJSONRequestBody = TeamCreate

// PutApiV1TeamIdJSONRequestBody defines body for PutApiV1TeamId for application/json ContentType.
type PutApiV1TeamIdJSONRequestBody = TeamUpdate

// PostApiV1UserJSONRequestBody defines body for PostApiV1User for application/json ContentType.
type PostApiV1UserJSONRequestBody = UserCreate

// PutApiV1UserIdJSONRequestBody defines body for PutApiV1UserId for application/json ContentType.
type PutApiV1UserIdJSONRequestBody = UserUpdate

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yb3Y6bOBTHXwV595KWzG5XqrjrdqvdUbtSNdP2phqNXDiZuAM2tc200SjvvrJNAiQ2",
	"gRTIJMvdDB/mcM7vfPwhPKKIpRmjQKVA4SMS0QJSrP98Qx8IZzQFKtW/GWcZcElA74w4YAnxK71rzniK",
	"JQpRjCU8kyQF5CO5zACFSEhO6B1a+YjE6tjdzeIdi+6huvMLYwlgqvZSnIL1tIyzrxBZLLNeZrWxh33R",
	"p618JCDiIK2LiyS/s++QWMIn4IIwWjmAUAl3wNUReRZ3dUwugDvu02Z3JS6vdRR2feD02iH3fLh5H7Uv",
	"nph5nDN+BSJjVFhMA7X7XxAC37Vd8R/AiVwcvKSBKhctr/bexf0BGRmDiDjJZB3mcj/Qh9csp9JOuiOf",
	"3cF1RVACTlvmcfflbT7snKMNgXCl4D7fHuam25pXNsFosM+Vg0e375riTCzYOCQ7YOIQMR7fmu3u/Xnu",
	"ON+ZuUeAWhKZ2BfpBfd1uA7l/Wdd3UCX+96bbuTQxOjNkA9Y3A85WPGcdlmlgeVeAPpgTYjxcj2F9Atw",
	"k4USUkfWmg2Yc7xsM36Khv7onlgOGxHd13K5+9Bc7ddVHWqYMvrQvDya0R8F8F7AhhSTpAvSTus5G7IV",
	"qBt2oeW+B3cqYSG+Mx53uROXWS54jmaWETU5J3J5raS1MQdn5PYelppVikK0ABwDR2tr0I9nOCPP1BEl",
	"shl5C0u0UisSOmf66qbboLeU/UA+eljrUqRMZBlQnBEUot+fz55fIHVHcqEvH9wutGZRf98ZvaWchVVu",
	"XcYoRH+DNKoGqcZshI0+87fZTMPNqCweC+AsS0ikTw2+CpOb5iGC+utXDnMUol+C8ilDUDxiCLZ0k76z",
	"WpKj66WQkHpEeMZenbJ/HMmEmH2nJp55mmK+NG7yhDnAGOgVTdRHEt8JFH5G78gDUBAC3ahTg1sOOF42",
	"+f1KH/BE3K6t9STzcBRBJj3J8XxOoqOFgTLptskVGnUC0TEow3K12WbigjMSPFwElYdKrvi8ysini7UI",
	"VznFcQpSN57PRTZ/y4Evy2ROSErUoaUvYpjjPJEovJj5lmZuX4bN5wIc69iWuflJhuoFNAWJYywte8zt",
	"WSegwmT7pMwkTjpNNOuRq9bhm7BaR2mn71vK9C5xeRSBEPM88fgGzH6xrz+KsthwSSVwihPvGvgDcE+f",
	"UOspGrpNN/l8o6JeTwLsJURIj829jf/KNHi/3nSj/MuEBfn3TGwzz+FbDkL+yUwl68UX9acpK+2MLXwv",
	"+r6YzeXFLq8Y304u5MaBHvYofF9H3B7w3bIXPJJ4ZepKAmaKqrPwl95epeEydtRANWuUtYvEBTaEQ4xC",
	"yXOo1rHtKWq3dL3YUQCuBH1hjh0nWlcgWM4j0I1pznJ6esCYmHq4GRa/VT8ci4bZGJVg4qvHHrQHriy3",
	"dZ58LLgGa2eFHLW2swni04HYxHEfx7aOmq3hXQVQf5/epqBu0K++i2+TBVklZ9ong3/GAqbi/fYKoup2",
	"y9PDo4ui/6eQqYWyzMQ31c3tBc3IOTZQw9n9UcjAGqqWGrsRr+w+Dy0FNToczLXvAMFj5Z/LrrLLxuyb",
	"6nojNIn6WrB19UnsPWWxR9vh7B88pJwPjLOxKuaEeH+jQmu+2wjPs+N70OljHMk75dKYspd2nn5E5cd9",
	"jT1k8yvA6VXaiK/S1uFpr4Q3cZpepmkNWnqwTIfrzbYW6rMC/hAVeevnmgOLwZIOS+yLfechA0UZNlvY",
	"LSWwy1u19VLTa7Wzea22Bxi/XXs8vTdrjSVhYqy/jrQXsEaNMwJgwzW3cbTGRPJ479fat1eJxf2mtTbW",
	"0A9Y3J9e/dRfh0zEDVs7FUQV1JTPtzErvlppJkwdNAnYEQWsCkt78arjMwlXLVyN5yrM6/9bCNYC8iH6",
	"eeVbpYGFqiFh18dq+3kIVGnCtB3erZLWRZSqJSZBejaC1AGIv7/FneAQ5Uj3iak+hygXUI3Cc2CghmlS",
	"4wjOidpxxOb+VpkXn/Y2lkb9/e80/Y84/euv4VtP/zo+0/Svp3/juZL5j/r/FtN/AfkQhbXyOfnA078h",
	"YdfHavt5TP+5CdN2eLdKWpfpXy0xTf9nM/07APH3t7jTm/5d6T4x1WNncQLVOP0PDNQwTWqc6X+idpzp",
	"39Uq9UpqaUNkzhMUooWUmQiDIGERThZMyPDl7OUMrW5W/wUAAP//043w4UFVAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
