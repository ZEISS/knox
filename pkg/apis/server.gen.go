// Package apis provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package apis

import (
	"context"
	"fmt"
	"net/url"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get system health status
	// (GET /_health)
	GetHealth(c *fiber.Ctx) error
	// Get system readiness
	// (GET /_ready)
	GetReady(c *fiber.Ctx) error
	// Lock the state of Terraform environment
	// (POST /client/{teamId}/{projectId}/{environmentId}/lock)
	LockEnvironment(c *fiber.Ctx, teamId TeamId, projectId ProjectId, environmentId EnvironmentId) error
	// Get the state of Terraform environment
	// (GET /client/{teamId}/{projectId}/{environmentId}/state)
	GetEnvironmentState(c *fiber.Ctx, teamId TeamId, projectId ProjectId, environmentId EnvironmentId) error
	// Update the state of Terraform environment
	// (POST /client/{teamId}/{projectId}/{environmentId}/state)
	UpdateEnvironmentState(c *fiber.Ctx, teamId TeamId, projectId ProjectId, environmentId EnvironmentId, params UpdateEnvironmentStateParams) error
	// Unlock the state of Terraform environment
	// (POST /client/{teamId}/{projectId}/{environmentId}/unlock)
	UnlockEnvironment(c *fiber.Ctx, teamId TeamId, projectId ProjectId, environmentId EnvironmentId) error
	// Get a list of projects
	// (GET /project)
	GetProject(c *fiber.Ctx, params GetProjectParams) error
	// Create a new project
	// (POST /project)
	PostProject(c *fiber.Ctx) error
	// Delete a project
	// (DELETE /project/{id})
	DeleteProjectId(c *fiber.Ctx, id string) error
	// Get a project
	// (GET /project/{id})
	GetProjectId(c *fiber.Ctx, id string) error
	// Update a project
	// (PUT /project/{id})
	PutProjectId(c *fiber.Ctx, id string) error
	// Get a list of environments
	// (GET /project/{projectId}/environment)
	GetProjectProjectIdEnvironment(c *fiber.Ctx, projectId string, params GetProjectProjectIdEnvironmentParams) error
	// Create a new environment
	// (POST /project/{projectId}/environment)
	PostProjectProjectIdEnvironment(c *fiber.Ctx, projectId string) error
	// Delete an environment
	// (DELETE /project/{projectId}/environment/{environmentId})
	DeleteProjectProjectIdEnvironmentEnvironmentId(c *fiber.Ctx, projectId string, environmentId string) error
	// Get an environment
	// (GET /project/{projectId}/environment/{environmentId})
	GetProjectProjectIdEnvironmentEnvironmentId(c *fiber.Ctx, projectId string, environmentId string) error
	// Update an environment
	// (PUT /project/{projectId}/environment/{environmentId})
	PutProjectProjectIdEnvironmentEnvironmentId(c *fiber.Ctx, projectId string, environmentId string) error
	// Get a list of snapshots
	// (GET /snapshot)
	GetSnapshot(c *fiber.Ctx, params GetSnapshotParams) error
	// Create a new snapshot
	// (POST /snapshot)
	CreateSnapshot(c *fiber.Ctx) error
	// Delete a snapshot
	// (DELETE /snapshot/{id})
	DeleteSnapshotId(c *fiber.Ctx, id string) error
	// Get a snapshot
	// (GET /snapshot/{id})
	GetSnapshotId(c *fiber.Ctx, id string) error
	// Update a snapshot
	// (PUT /snapshot/{id})
	PutSnapshotId(c *fiber.Ctx, id string) error
	// Get a task
	// (GET /task/{id})
	GetTaskId(c *fiber.Ctx, id string) error
	// Get a list of teams
	// (GET /team)
	GetTeam(c *fiber.Ctx, params GetTeamParams) error
	// Create a new team
	// (POST /team)
	PostTeam(c *fiber.Ctx) error
	// Delete a team
	// (DELETE /team/{id})
	DeleteTeamId(c *fiber.Ctx, id string) error
	// Get a team
	// (GET /team/{id})
	GetTeamId(c *fiber.Ctx, id string) error
	// Update a team
	// (PUT /team/{id})
	PutTeamId(c *fiber.Ctx, id string) error
	// Get a list of users
	// (GET /user)
	GetUser(c *fiber.Ctx, params GetUserParams) error
	// Create a new user
	// (POST /user)
	PostUser(c *fiber.Ctx) error
	// Delete a user
	// (DELETE /user/{id})
	DeleteUserId(c *fiber.Ctx, id string) error
	// Get a user
	// (GET /user/{id})
	GetUserId(c *fiber.Ctx, id string) error
	// Update a user
	// (PUT /user/{id})
	PutUserId(c *fiber.Ctx, id string) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *fiber.Ctx) error {

	return siw.Handler.GetHealth(c)
}

// GetReady operation middleware
func (siw *ServerInterfaceWrapper) GetReady(c *fiber.Ctx) error {

	return siw.Handler.GetReady(c)
}

// LockEnvironment operation middleware
func (siw *ServerInterfaceWrapper) LockEnvironment(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "environmentId" -------------
	var environmentId EnvironmentId

	err = runtime.BindStyledParameterWithOptions("simple", "environmentId", c.Params("environmentId"), &environmentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter environmentId: %w", err).Error())
	}

	c.Context().SetUserValue(Basic_authScopes, []string{})

	return siw.Handler.LockEnvironment(c, teamId, projectId, environmentId)
}

// GetEnvironmentState operation middleware
func (siw *ServerInterfaceWrapper) GetEnvironmentState(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "environmentId" -------------
	var environmentId EnvironmentId

	err = runtime.BindStyledParameterWithOptions("simple", "environmentId", c.Params("environmentId"), &environmentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter environmentId: %w", err).Error())
	}

	c.Context().SetUserValue(Basic_authScopes, []string{})

	return siw.Handler.GetEnvironmentState(c, teamId, projectId, environmentId)
}

// UpdateEnvironmentState operation middleware
func (siw *ServerInterfaceWrapper) UpdateEnvironmentState(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "environmentId" -------------
	var environmentId EnvironmentId

	err = runtime.BindStyledParameterWithOptions("simple", "environmentId", c.Params("environmentId"), &environmentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter environmentId: %w", err).Error())
	}

	c.Context().SetUserValue(Basic_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateEnvironmentStateParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "ID" -------------

	err = runtime.BindQueryParameter("form", true, false, "ID", query, &params.ID)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter ID: %w", err).Error())
	}

	return siw.Handler.UpdateEnvironmentState(c, teamId, projectId, environmentId, params)
}

// UnlockEnvironment operation middleware
func (siw *ServerInterfaceWrapper) UnlockEnvironment(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "environmentId" -------------
	var environmentId EnvironmentId

	err = runtime.BindStyledParameterWithOptions("simple", "environmentId", c.Params("environmentId"), &environmentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter environmentId: %w", err).Error())
	}

	c.Context().SetUserValue(Basic_authScopes, []string{})

	return siw.Handler.UnlockEnvironment(c, teamId, projectId, environmentId)
}

// GetProject operation middleware
func (siw *ServerInterfaceWrapper) GetProject(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProjectParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetProject(c, params)
}

// PostProject operation middleware
func (siw *ServerInterfaceWrapper) PostProject(c *fiber.Ctx) error {

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.PostProject(c)
}

// DeleteProjectId operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.DeleteProjectId(c, id)
}

// GetProjectId operation middleware
func (siw *ServerInterfaceWrapper) GetProjectId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.GetProjectId(c, id)
}

// PutProjectId operation middleware
func (siw *ServerInterfaceWrapper) PutProjectId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.PutProjectId(c, id)
}

// GetProjectProjectIdEnvironment operation middleware
func (siw *ServerInterfaceWrapper) GetProjectProjectIdEnvironment(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProjectProjectIdEnvironmentParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetProjectProjectIdEnvironment(c, projectId, params)
}

// PostProjectProjectIdEnvironment operation middleware
func (siw *ServerInterfaceWrapper) PostProjectProjectIdEnvironment(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.PostProjectProjectIdEnvironment(c, projectId)
}

// DeleteProjectProjectIdEnvironmentEnvironmentId operation middleware
func (siw *ServerInterfaceWrapper) DeleteProjectProjectIdEnvironmentEnvironmentId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "environmentId" -------------
	var environmentId string

	err = runtime.BindStyledParameterWithOptions("simple", "environmentId", c.Params("environmentId"), &environmentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter environmentId: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.DeleteProjectProjectIdEnvironmentEnvironmentId(c, projectId, environmentId)
}

// GetProjectProjectIdEnvironmentEnvironmentId operation middleware
func (siw *ServerInterfaceWrapper) GetProjectProjectIdEnvironmentEnvironmentId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "environmentId" -------------
	var environmentId string

	err = runtime.BindStyledParameterWithOptions("simple", "environmentId", c.Params("environmentId"), &environmentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter environmentId: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.GetProjectProjectIdEnvironmentEnvironmentId(c, projectId, environmentId)
}

// PutProjectProjectIdEnvironmentEnvironmentId operation middleware
func (siw *ServerInterfaceWrapper) PutProjectProjectIdEnvironmentEnvironmentId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "environmentId" -------------
	var environmentId string

	err = runtime.BindStyledParameterWithOptions("simple", "environmentId", c.Params("environmentId"), &environmentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter environmentId: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.PutProjectProjectIdEnvironmentEnvironmentId(c, projectId, environmentId)
}

// GetSnapshot operation middleware
func (siw *ServerInterfaceWrapper) GetSnapshot(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSnapshotParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetSnapshot(c, params)
}

// CreateSnapshot operation middleware
func (siw *ServerInterfaceWrapper) CreateSnapshot(c *fiber.Ctx) error {

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.CreateSnapshot(c)
}

// DeleteSnapshotId operation middleware
func (siw *ServerInterfaceWrapper) DeleteSnapshotId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.DeleteSnapshotId(c, id)
}

// GetSnapshotId operation middleware
func (siw *ServerInterfaceWrapper) GetSnapshotId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.GetSnapshotId(c, id)
}

// PutSnapshotId operation middleware
func (siw *ServerInterfaceWrapper) PutSnapshotId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.PutSnapshotId(c, id)
}

// GetTaskId operation middleware
func (siw *ServerInterfaceWrapper) GetTaskId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.GetTaskId(c, id)
}

// GetTeam operation middleware
func (siw *ServerInterfaceWrapper) GetTeam(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTeamParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetTeam(c, params)
}

// PostTeam operation middleware
func (siw *ServerInterfaceWrapper) PostTeam(c *fiber.Ctx) error {

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.PostTeam(c)
}

// DeleteTeamId operation middleware
func (siw *ServerInterfaceWrapper) DeleteTeamId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.DeleteTeamId(c, id)
}

// GetTeamId operation middleware
func (siw *ServerInterfaceWrapper) GetTeamId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.GetTeamId(c, id)
}

// PutTeamId operation middleware
func (siw *ServerInterfaceWrapper) PutTeamId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.PutTeamId(c, id)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetUser(c, params)
}

// PostUser operation middleware
func (siw *ServerInterfaceWrapper) PostUser(c *fiber.Ctx) error {

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.PostUser(c)
}

// DeleteUserId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.DeleteUserId(c, id)
}

// GetUserId operation middleware
func (siw *ServerInterfaceWrapper) GetUserId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.GetUserId(c, id)
}

// PutUserId operation middleware
func (siw *ServerInterfaceWrapper) PutUserId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.PutUserId(c, id)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/_health", wrapper.GetHealth)

	router.Get(options.BaseURL+"/_ready", wrapper.GetReady)

	router.Post(options.BaseURL+"/client/:teamId/:projectId/:environmentId/lock", wrapper.LockEnvironment)

	router.Get(options.BaseURL+"/client/:teamId/:projectId/:environmentId/state", wrapper.GetEnvironmentState)

	router.Post(options.BaseURL+"/client/:teamId/:projectId/:environmentId/state", wrapper.UpdateEnvironmentState)

	router.Post(options.BaseURL+"/client/:teamId/:projectId/:environmentId/unlock", wrapper.UnlockEnvironment)

	router.Get(options.BaseURL+"/project", wrapper.GetProject)

	router.Post(options.BaseURL+"/project", wrapper.PostProject)

	router.Delete(options.BaseURL+"/project/:id", wrapper.DeleteProjectId)

	router.Get(options.BaseURL+"/project/:id", wrapper.GetProjectId)

	router.Put(options.BaseURL+"/project/:id", wrapper.PutProjectId)

	router.Get(options.BaseURL+"/project/:projectId/environment", wrapper.GetProjectProjectIdEnvironment)

	router.Post(options.BaseURL+"/project/:projectId/environment", wrapper.PostProjectProjectIdEnvironment)

	router.Delete(options.BaseURL+"/project/:projectId/environment/:environmentId", wrapper.DeleteProjectProjectIdEnvironmentEnvironmentId)

	router.Get(options.BaseURL+"/project/:projectId/environment/:environmentId", wrapper.GetProjectProjectIdEnvironmentEnvironmentId)

	router.Put(options.BaseURL+"/project/:projectId/environment/:environmentId", wrapper.PutProjectProjectIdEnvironmentEnvironmentId)

	router.Get(options.BaseURL+"/snapshot", wrapper.GetSnapshot)

	router.Post(options.BaseURL+"/snapshot", wrapper.CreateSnapshot)

	router.Delete(options.BaseURL+"/snapshot/:id", wrapper.DeleteSnapshotId)

	router.Get(options.BaseURL+"/snapshot/:id", wrapper.GetSnapshotId)

	router.Put(options.BaseURL+"/snapshot/:id", wrapper.PutSnapshotId)

	router.Get(options.BaseURL+"/task/:id", wrapper.GetTaskId)

	router.Get(options.BaseURL+"/team", wrapper.GetTeam)

	router.Post(options.BaseURL+"/team", wrapper.PostTeam)

	router.Delete(options.BaseURL+"/team/:id", wrapper.DeleteTeamId)

	router.Get(options.BaseURL+"/team/:id", wrapper.GetTeamId)

	router.Put(options.BaseURL+"/team/:id", wrapper.PutTeamId)

	router.Get(options.BaseURL+"/user", wrapper.GetUser)

	router.Post(options.BaseURL+"/user", wrapper.PostUser)

	router.Delete(options.BaseURL+"/user/:id", wrapper.DeleteUserId)

	router.Get(options.BaseURL+"/user/:id", wrapper.GetUserId)

	router.Put(options.BaseURL+"/user/:id", wrapper.PutUserId)

}

type GetHealthRequestObject struct {
}

type GetHealthResponseObject interface {
	VisitGetHealthResponse(ctx *fiber.Ctx) error
}

type GetHealth200JSONResponse HealthResponse

func (response GetHealth200JSONResponse) VisitGetHealthResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetHealth500JSONResponse HealthResponse

func (response GetHealth500JSONResponse) VisitGetHealthResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetReadyRequestObject struct {
}

type GetReadyResponseObject interface {
	VisitGetReadyResponse(ctx *fiber.Ctx) error
}

type GetReady200JSONResponse HealthResponse

func (response GetReady200JSONResponse) VisitGetReadyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetReady500JSONResponse HealthResponse

func (response GetReady500JSONResponse) VisitGetReadyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type LockEnvironmentRequestObject struct {
	TeamId        TeamId        `json:"teamId"`
	ProjectId     ProjectId     `json:"projectId"`
	EnvironmentId EnvironmentId `json:"environmentId"`
	Body          *LockEnvironmentJSONRequestBody
}

type LockEnvironmentResponseObject interface {
	VisitLockEnvironmentResponse(ctx *fiber.Ctx) error
}

type LockEnvironment200JSONResponse LockInfo

func (response LockEnvironment200JSONResponse) VisitLockEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type LockEnvironment404JSONResponse ErrorResponse

func (response LockEnvironment404JSONResponse) VisitLockEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type LockEnvironment500JSONResponse ErrorResponse

func (response LockEnvironment500JSONResponse) VisitLockEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetEnvironmentStateRequestObject struct {
	TeamId        TeamId        `json:"teamId"`
	ProjectId     ProjectId     `json:"projectId"`
	EnvironmentId EnvironmentId `json:"environmentId"`
}

type GetEnvironmentStateResponseObject interface {
	VisitGetEnvironmentStateResponse(ctx *fiber.Ctx) error
}

type GetEnvironmentState200JSONResponse Payload

func (response GetEnvironmentState200JSONResponse) VisitGetEnvironmentStateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetEnvironmentState404JSONResponse ErrorResponse

func (response GetEnvironmentState404JSONResponse) VisitGetEnvironmentStateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetEnvironmentState500JSONResponse ErrorResponse

func (response GetEnvironmentState500JSONResponse) VisitGetEnvironmentStateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type UpdateEnvironmentStateRequestObject struct {
	TeamId        TeamId        `json:"teamId"`
	ProjectId     ProjectId     `json:"projectId"`
	EnvironmentId EnvironmentId `json:"environmentId"`
	Params        UpdateEnvironmentStateParams
	Body          *UpdateEnvironmentStateJSONRequestBody
}

type UpdateEnvironmentStateResponseObject interface {
	VisitUpdateEnvironmentStateResponse(ctx *fiber.Ctx) error
}

type UpdateEnvironmentState200JSONResponse Payload

func (response UpdateEnvironmentState200JSONResponse) VisitUpdateEnvironmentStateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UpdateEnvironmentState404JSONResponse ErrorResponse

func (response UpdateEnvironmentState404JSONResponse) VisitUpdateEnvironmentStateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type UpdateEnvironmentState500JSONResponse ErrorResponse

func (response UpdateEnvironmentState500JSONResponse) VisitUpdateEnvironmentStateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type UnlockEnvironmentRequestObject struct {
	TeamId        TeamId        `json:"teamId"`
	ProjectId     ProjectId     `json:"projectId"`
	EnvironmentId EnvironmentId `json:"environmentId"`
	Body          *UnlockEnvironmentJSONRequestBody
}

type UnlockEnvironmentResponseObject interface {
	VisitUnlockEnvironmentResponse(ctx *fiber.Ctx) error
}

type UnlockEnvironment200Response struct {
}

func (response UnlockEnvironment200Response) VisitUnlockEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type UnlockEnvironment204Response struct {
}

func (response UnlockEnvironment204Response) VisitUnlockEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type UnlockEnvironment404JSONResponse ErrorResponse

func (response UnlockEnvironment404JSONResponse) VisitUnlockEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type UnlockEnvironment500JSONResponse ErrorResponse

func (response UnlockEnvironment500JSONResponse) VisitUnlockEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetProjectRequestObject struct {
	Params GetProjectParams
}

type GetProjectResponseObject interface {
	VisitGetProjectResponse(ctx *fiber.Ctx) error
}

type GetProject200JSONResponse struct {
	Metadata *struct {
		Limit      *int `json:"limit,omitempty"`
		Offset     *int `json:"offset,omitempty"`
		TotalCount *int `json:"totalCount,omitempty"`
	} `json:"metadata,omitempty"`
	Projects *[]Project `json:"projects,omitempty"`
}

func (response GetProject200JSONResponse) VisitGetProjectResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetProject500JSONResponse ErrorResponse

func (response GetProject500JSONResponse) VisitGetProjectResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostProjectRequestObject struct {
	Body *PostProjectJSONRequestBody
}

type PostProjectResponseObject interface {
	VisitPostProjectResponse(ctx *fiber.Ctx) error
}

type PostProject201JSONResponse Project

func (response PostProject201JSONResponse) VisitPostProjectResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type PostProject500JSONResponse ErrorResponse

func (response PostProject500JSONResponse) VisitPostProjectResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeleteProjectIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteProjectIdResponseObject interface {
	VisitDeleteProjectIdResponse(ctx *fiber.Ctx) error
}

type DeleteProjectId204Response struct {
}

func (response DeleteProjectId204Response) VisitDeleteProjectIdResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type DeleteProjectId404JSONResponse ErrorResponse

func (response DeleteProjectId404JSONResponse) VisitDeleteProjectIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type DeleteProjectId500JSONResponse ErrorResponse

func (response DeleteProjectId500JSONResponse) VisitDeleteProjectIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetProjectIdRequestObject struct {
	Id string `json:"id"`
}

type GetProjectIdResponseObject interface {
	VisitGetProjectIdResponse(ctx *fiber.Ctx) error
}

type GetProjectId200JSONResponse Project

func (response GetProjectId200JSONResponse) VisitGetProjectIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetProjectId404JSONResponse ErrorResponse

func (response GetProjectId404JSONResponse) VisitGetProjectIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetProjectId500JSONResponse ErrorResponse

func (response GetProjectId500JSONResponse) VisitGetProjectIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PutProjectIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutProjectIdJSONRequestBody
}

type PutProjectIdResponseObject interface {
	VisitPutProjectIdResponse(ctx *fiber.Ctx) error
}

type PutProjectId200JSONResponse Project

func (response PutProjectId200JSONResponse) VisitPutProjectIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PutProjectId404JSONResponse ErrorResponse

func (response PutProjectId404JSONResponse) VisitPutProjectIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PutProjectId500JSONResponse ErrorResponse

func (response PutProjectId500JSONResponse) VisitPutProjectIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetProjectProjectIdEnvironmentRequestObject struct {
	ProjectId string `json:"projectId"`
	Params    GetProjectProjectIdEnvironmentParams
}

type GetProjectProjectIdEnvironmentResponseObject interface {
	VisitGetProjectProjectIdEnvironmentResponse(ctx *fiber.Ctx) error
}

type GetProjectProjectIdEnvironment200JSONResponse struct {
	Environments *[]Environment `json:"environments,omitempty"`
	Metadata     *struct {
		Limit      *int `json:"limit,omitempty"`
		Offset     *int `json:"offset,omitempty"`
		TotalCount *int `json:"totalCount,omitempty"`
	} `json:"metadata,omitempty"`
}

func (response GetProjectProjectIdEnvironment200JSONResponse) VisitGetProjectProjectIdEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetProjectProjectIdEnvironment500JSONResponse ErrorResponse

func (response GetProjectProjectIdEnvironment500JSONResponse) VisitGetProjectProjectIdEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostProjectProjectIdEnvironmentRequestObject struct {
	ProjectId string `json:"projectId"`
	Body      *PostProjectProjectIdEnvironmentJSONRequestBody
}

type PostProjectProjectIdEnvironmentResponseObject interface {
	VisitPostProjectProjectIdEnvironmentResponse(ctx *fiber.Ctx) error
}

type PostProjectProjectIdEnvironment201JSONResponse Environment

func (response PostProjectProjectIdEnvironment201JSONResponse) VisitPostProjectProjectIdEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type PostProjectProjectIdEnvironment500JSONResponse ErrorResponse

func (response PostProjectProjectIdEnvironment500JSONResponse) VisitPostProjectProjectIdEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeleteProjectProjectIdEnvironmentEnvironmentIdRequestObject struct {
	ProjectId     string `json:"projectId"`
	EnvironmentId string `json:"environmentId"`
}

type DeleteProjectProjectIdEnvironmentEnvironmentIdResponseObject interface {
	VisitDeleteProjectProjectIdEnvironmentEnvironmentIdResponse(ctx *fiber.Ctx) error
}

type DeleteProjectProjectIdEnvironmentEnvironmentId204Response struct {
}

func (response DeleteProjectProjectIdEnvironmentEnvironmentId204Response) VisitDeleteProjectProjectIdEnvironmentEnvironmentIdResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type DeleteProjectProjectIdEnvironmentEnvironmentId404JSONResponse ErrorResponse

func (response DeleteProjectProjectIdEnvironmentEnvironmentId404JSONResponse) VisitDeleteProjectProjectIdEnvironmentEnvironmentIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type DeleteProjectProjectIdEnvironmentEnvironmentId500JSONResponse ErrorResponse

func (response DeleteProjectProjectIdEnvironmentEnvironmentId500JSONResponse) VisitDeleteProjectProjectIdEnvironmentEnvironmentIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetProjectProjectIdEnvironmentEnvironmentIdRequestObject struct {
	ProjectId     string `json:"projectId"`
	EnvironmentId string `json:"environmentId"`
}

type GetProjectProjectIdEnvironmentEnvironmentIdResponseObject interface {
	VisitGetProjectProjectIdEnvironmentEnvironmentIdResponse(ctx *fiber.Ctx) error
}

type GetProjectProjectIdEnvironmentEnvironmentId200JSONResponse Environment

func (response GetProjectProjectIdEnvironmentEnvironmentId200JSONResponse) VisitGetProjectProjectIdEnvironmentEnvironmentIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetProjectProjectIdEnvironmentEnvironmentId404JSONResponse ErrorResponse

func (response GetProjectProjectIdEnvironmentEnvironmentId404JSONResponse) VisitGetProjectProjectIdEnvironmentEnvironmentIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetProjectProjectIdEnvironmentEnvironmentId500JSONResponse ErrorResponse

func (response GetProjectProjectIdEnvironmentEnvironmentId500JSONResponse) VisitGetProjectProjectIdEnvironmentEnvironmentIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PutProjectProjectIdEnvironmentEnvironmentIdRequestObject struct {
	ProjectId     string `json:"projectId"`
	EnvironmentId string `json:"environmentId"`
	Body          *PutProjectProjectIdEnvironmentEnvironmentIdJSONRequestBody
}

type PutProjectProjectIdEnvironmentEnvironmentIdResponseObject interface {
	VisitPutProjectProjectIdEnvironmentEnvironmentIdResponse(ctx *fiber.Ctx) error
}

type PutProjectProjectIdEnvironmentEnvironmentId200JSONResponse Environment

func (response PutProjectProjectIdEnvironmentEnvironmentId200JSONResponse) VisitPutProjectProjectIdEnvironmentEnvironmentIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PutProjectProjectIdEnvironmentEnvironmentId404JSONResponse ErrorResponse

func (response PutProjectProjectIdEnvironmentEnvironmentId404JSONResponse) VisitPutProjectProjectIdEnvironmentEnvironmentIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PutProjectProjectIdEnvironmentEnvironmentId500JSONResponse ErrorResponse

func (response PutProjectProjectIdEnvironmentEnvironmentId500JSONResponse) VisitPutProjectProjectIdEnvironmentEnvironmentIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetSnapshotRequestObject struct {
	Params GetSnapshotParams
}

type GetSnapshotResponseObject interface {
	VisitGetSnapshotResponse(ctx *fiber.Ctx) error
}

type GetSnapshot200JSONResponse struct {
	Metadata *struct {
		Limit      *int `json:"limit,omitempty"`
		Offset     *int `json:"offset,omitempty"`
		TotalCount *int `json:"totalCount,omitempty"`
	} `json:"metadata,omitempty"`
	Snapshots *[]Snapshot `json:"snapshots,omitempty"`
}

func (response GetSnapshot200JSONResponse) VisitGetSnapshotResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetSnapshot500JSONResponse ErrorResponse

func (response GetSnapshot500JSONResponse) VisitGetSnapshotResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type CreateSnapshotRequestObject struct {
	Body *CreateSnapshotJSONRequestBody
}

type CreateSnapshotResponseObject interface {
	VisitCreateSnapshotResponse(ctx *fiber.Ctx) error
}

type CreateSnapshot201JSONResponse Snapshot

func (response CreateSnapshot201JSONResponse) VisitCreateSnapshotResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type CreateSnapshot500JSONResponse ErrorResponse

func (response CreateSnapshot500JSONResponse) VisitCreateSnapshotResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeleteSnapshotIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteSnapshotIdResponseObject interface {
	VisitDeleteSnapshotIdResponse(ctx *fiber.Ctx) error
}

type DeleteSnapshotId204Response struct {
}

func (response DeleteSnapshotId204Response) VisitDeleteSnapshotIdResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type DeleteSnapshotId404JSONResponse ErrorResponse

func (response DeleteSnapshotId404JSONResponse) VisitDeleteSnapshotIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type DeleteSnapshotId500JSONResponse ErrorResponse

func (response DeleteSnapshotId500JSONResponse) VisitDeleteSnapshotIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetSnapshotIdRequestObject struct {
	Id string `json:"id"`
}

type GetSnapshotIdResponseObject interface {
	VisitGetSnapshotIdResponse(ctx *fiber.Ctx) error
}

type GetSnapshotId200JSONResponse Snapshot

func (response GetSnapshotId200JSONResponse) VisitGetSnapshotIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetSnapshotId404JSONResponse ErrorResponse

func (response GetSnapshotId404JSONResponse) VisitGetSnapshotIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetSnapshotId500JSONResponse ErrorResponse

func (response GetSnapshotId500JSONResponse) VisitGetSnapshotIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PutSnapshotIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutSnapshotIdJSONRequestBody
}

type PutSnapshotIdResponseObject interface {
	VisitPutSnapshotIdResponse(ctx *fiber.Ctx) error
}

type PutSnapshotId200JSONResponse Snapshot

func (response PutSnapshotId200JSONResponse) VisitPutSnapshotIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PutSnapshotId404JSONResponse ErrorResponse

func (response PutSnapshotId404JSONResponse) VisitPutSnapshotIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PutSnapshotId500JSONResponse ErrorResponse

func (response PutSnapshotId500JSONResponse) VisitPutSnapshotIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetTaskIdRequestObject struct {
	Id string `json:"id"`
}

type GetTaskIdResponseObject interface {
	VisitGetTaskIdResponse(ctx *fiber.Ctx) error
}

type GetTaskId200JSONResponse Task

func (response GetTaskId200JSONResponse) VisitGetTaskIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetTaskId404JSONResponse ErrorResponse

func (response GetTaskId404JSONResponse) VisitGetTaskIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetTaskId500JSONResponse ErrorResponse

func (response GetTaskId500JSONResponse) VisitGetTaskIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetTeamRequestObject struct {
	Params GetTeamParams
}

type GetTeamResponseObject interface {
	VisitGetTeamResponse(ctx *fiber.Ctx) error
}

type GetTeam200JSONResponse struct {
	Metadata *struct {
		Limit      *int `json:"limit,omitempty"`
		Offset     *int `json:"offset,omitempty"`
		TotalCount *int `json:"totalCount,omitempty"`
	} `json:"metadata,omitempty"`
	Teams *[]Team `json:"teams,omitempty"`
}

func (response GetTeam200JSONResponse) VisitGetTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetTeam500JSONResponse ErrorResponse

func (response GetTeam500JSONResponse) VisitGetTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostTeamRequestObject struct {
	Body *PostTeamJSONRequestBody
}

type PostTeamResponseObject interface {
	VisitPostTeamResponse(ctx *fiber.Ctx) error
}

type PostTeam201JSONResponse Team

func (response PostTeam201JSONResponse) VisitPostTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type PostTeam500JSONResponse ErrorResponse

func (response PostTeam500JSONResponse) VisitPostTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeleteTeamIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteTeamIdResponseObject interface {
	VisitDeleteTeamIdResponse(ctx *fiber.Ctx) error
}

type DeleteTeamId204Response struct {
}

func (response DeleteTeamId204Response) VisitDeleteTeamIdResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type DeleteTeamId404JSONResponse ErrorResponse

func (response DeleteTeamId404JSONResponse) VisitDeleteTeamIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type DeleteTeamId500JSONResponse ErrorResponse

func (response DeleteTeamId500JSONResponse) VisitDeleteTeamIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetTeamIdRequestObject struct {
	Id string `json:"id"`
}

type GetTeamIdResponseObject interface {
	VisitGetTeamIdResponse(ctx *fiber.Ctx) error
}

type GetTeamId200JSONResponse Team

func (response GetTeamId200JSONResponse) VisitGetTeamIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetTeamId404JSONResponse ErrorResponse

func (response GetTeamId404JSONResponse) VisitGetTeamIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetTeamId500JSONResponse ErrorResponse

func (response GetTeamId500JSONResponse) VisitGetTeamIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PutTeamIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutTeamIdJSONRequestBody
}

type PutTeamIdResponseObject interface {
	VisitPutTeamIdResponse(ctx *fiber.Ctx) error
}

type PutTeamId200JSONResponse Team

func (response PutTeamId200JSONResponse) VisitPutTeamIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PutTeamId404JSONResponse ErrorResponse

func (response PutTeamId404JSONResponse) VisitPutTeamIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PutTeamId500JSONResponse ErrorResponse

func (response PutTeamId500JSONResponse) VisitPutTeamIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetUserRequestObject struct {
	Params GetUserParams
}

type GetUserResponseObject interface {
	VisitGetUserResponse(ctx *fiber.Ctx) error
}

type GetUser200JSONResponse struct {
	Metadata *struct {
		Limit      *int `json:"limit,omitempty"`
		Offset     *int `json:"offset,omitempty"`
		TotalCount *int `json:"totalCount,omitempty"`
	} `json:"metadata,omitempty"`
	Users *[]User `json:"users,omitempty"`
}

func (response GetUser200JSONResponse) VisitGetUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetUser500JSONResponse ErrorResponse

func (response GetUser500JSONResponse) VisitGetUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostUserRequestObject struct {
	Body *PostUserJSONRequestBody
}

type PostUserResponseObject interface {
	VisitPostUserResponse(ctx *fiber.Ctx) error
}

type PostUser201JSONResponse User

func (response PostUser201JSONResponse) VisitPostUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type PostUser500JSONResponse ErrorResponse

func (response PostUser500JSONResponse) VisitPostUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeleteUserIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteUserIdResponseObject interface {
	VisitDeleteUserIdResponse(ctx *fiber.Ctx) error
}

type DeleteUserId204Response struct {
}

func (response DeleteUserId204Response) VisitDeleteUserIdResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type DeleteUserId404JSONResponse ErrorResponse

func (response DeleteUserId404JSONResponse) VisitDeleteUserIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type DeleteUserId500JSONResponse ErrorResponse

func (response DeleteUserId500JSONResponse) VisitDeleteUserIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetUserIdRequestObject struct {
	Id string `json:"id"`
}

type GetUserIdResponseObject interface {
	VisitGetUserIdResponse(ctx *fiber.Ctx) error
}

type GetUserId200JSONResponse User

func (response GetUserId200JSONResponse) VisitGetUserIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetUserId404JSONResponse ErrorResponse

func (response GetUserId404JSONResponse) VisitGetUserIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetUserId500JSONResponse ErrorResponse

func (response GetUserId500JSONResponse) VisitGetUserIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PutUserIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutUserIdJSONRequestBody
}

type PutUserIdResponseObject interface {
	VisitPutUserIdResponse(ctx *fiber.Ctx) error
}

type PutUserId200JSONResponse User

func (response PutUserId200JSONResponse) VisitPutUserIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PutUserId404JSONResponse ErrorResponse

func (response PutUserId404JSONResponse) VisitPutUserIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PutUserId500JSONResponse ErrorResponse

func (response PutUserId500JSONResponse) VisitPutUserIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get system health status
	// (GET /_health)
	GetHealth(ctx context.Context, request GetHealthRequestObject) (GetHealthResponseObject, error)
	// Get system readiness
	// (GET /_ready)
	GetReady(ctx context.Context, request GetReadyRequestObject) (GetReadyResponseObject, error)
	// Lock the state of Terraform environment
	// (POST /client/{teamId}/{projectId}/{environmentId}/lock)
	LockEnvironment(ctx context.Context, request LockEnvironmentRequestObject) (LockEnvironmentResponseObject, error)
	// Get the state of Terraform environment
	// (GET /client/{teamId}/{projectId}/{environmentId}/state)
	GetEnvironmentState(ctx context.Context, request GetEnvironmentStateRequestObject) (GetEnvironmentStateResponseObject, error)
	// Update the state of Terraform environment
	// (POST /client/{teamId}/{projectId}/{environmentId}/state)
	UpdateEnvironmentState(ctx context.Context, request UpdateEnvironmentStateRequestObject) (UpdateEnvironmentStateResponseObject, error)
	// Unlock the state of Terraform environment
	// (POST /client/{teamId}/{projectId}/{environmentId}/unlock)
	UnlockEnvironment(ctx context.Context, request UnlockEnvironmentRequestObject) (UnlockEnvironmentResponseObject, error)
	// Get a list of projects
	// (GET /project)
	GetProject(ctx context.Context, request GetProjectRequestObject) (GetProjectResponseObject, error)
	// Create a new project
	// (POST /project)
	PostProject(ctx context.Context, request PostProjectRequestObject) (PostProjectResponseObject, error)
	// Delete a project
	// (DELETE /project/{id})
	DeleteProjectId(ctx context.Context, request DeleteProjectIdRequestObject) (DeleteProjectIdResponseObject, error)
	// Get a project
	// (GET /project/{id})
	GetProjectId(ctx context.Context, request GetProjectIdRequestObject) (GetProjectIdResponseObject, error)
	// Update a project
	// (PUT /project/{id})
	PutProjectId(ctx context.Context, request PutProjectIdRequestObject) (PutProjectIdResponseObject, error)
	// Get a list of environments
	// (GET /project/{projectId}/environment)
	GetProjectProjectIdEnvironment(ctx context.Context, request GetProjectProjectIdEnvironmentRequestObject) (GetProjectProjectIdEnvironmentResponseObject, error)
	// Create a new environment
	// (POST /project/{projectId}/environment)
	PostProjectProjectIdEnvironment(ctx context.Context, request PostProjectProjectIdEnvironmentRequestObject) (PostProjectProjectIdEnvironmentResponseObject, error)
	// Delete an environment
	// (DELETE /project/{projectId}/environment/{environmentId})
	DeleteProjectProjectIdEnvironmentEnvironmentId(ctx context.Context, request DeleteProjectProjectIdEnvironmentEnvironmentIdRequestObject) (DeleteProjectProjectIdEnvironmentEnvironmentIdResponseObject, error)
	// Get an environment
	// (GET /project/{projectId}/environment/{environmentId})
	GetProjectProjectIdEnvironmentEnvironmentId(ctx context.Context, request GetProjectProjectIdEnvironmentEnvironmentIdRequestObject) (GetProjectProjectIdEnvironmentEnvironmentIdResponseObject, error)
	// Update an environment
	// (PUT /project/{projectId}/environment/{environmentId})
	PutProjectProjectIdEnvironmentEnvironmentId(ctx context.Context, request PutProjectProjectIdEnvironmentEnvironmentIdRequestObject) (PutProjectProjectIdEnvironmentEnvironmentIdResponseObject, error)
	// Get a list of snapshots
	// (GET /snapshot)
	GetSnapshot(ctx context.Context, request GetSnapshotRequestObject) (GetSnapshotResponseObject, error)
	// Create a new snapshot
	// (POST /snapshot)
	CreateSnapshot(ctx context.Context, request CreateSnapshotRequestObject) (CreateSnapshotResponseObject, error)
	// Delete a snapshot
	// (DELETE /snapshot/{id})
	DeleteSnapshotId(ctx context.Context, request DeleteSnapshotIdRequestObject) (DeleteSnapshotIdResponseObject, error)
	// Get a snapshot
	// (GET /snapshot/{id})
	GetSnapshotId(ctx context.Context, request GetSnapshotIdRequestObject) (GetSnapshotIdResponseObject, error)
	// Update a snapshot
	// (PUT /snapshot/{id})
	PutSnapshotId(ctx context.Context, request PutSnapshotIdRequestObject) (PutSnapshotIdResponseObject, error)
	// Get a task
	// (GET /task/{id})
	GetTaskId(ctx context.Context, request GetTaskIdRequestObject) (GetTaskIdResponseObject, error)
	// Get a list of teams
	// (GET /team)
	GetTeam(ctx context.Context, request GetTeamRequestObject) (GetTeamResponseObject, error)
	// Create a new team
	// (POST /team)
	PostTeam(ctx context.Context, request PostTeamRequestObject) (PostTeamResponseObject, error)
	// Delete a team
	// (DELETE /team/{id})
	DeleteTeamId(ctx context.Context, request DeleteTeamIdRequestObject) (DeleteTeamIdResponseObject, error)
	// Get a team
	// (GET /team/{id})
	GetTeamId(ctx context.Context, request GetTeamIdRequestObject) (GetTeamIdResponseObject, error)
	// Update a team
	// (PUT /team/{id})
	PutTeamId(ctx context.Context, request PutTeamIdRequestObject) (PutTeamIdResponseObject, error)
	// Get a list of users
	// (GET /user)
	GetUser(ctx context.Context, request GetUserRequestObject) (GetUserResponseObject, error)
	// Create a new user
	// (POST /user)
	PostUser(ctx context.Context, request PostUserRequestObject) (PostUserResponseObject, error)
	// Delete a user
	// (DELETE /user/{id})
	DeleteUserId(ctx context.Context, request DeleteUserIdRequestObject) (DeleteUserIdResponseObject, error)
	// Get a user
	// (GET /user/{id})
	GetUserId(ctx context.Context, request GetUserIdRequestObject) (GetUserIdResponseObject, error)
	// Update a user
	// (PUT /user/{id})
	PutUserId(ctx context.Context, request PutUserIdRequestObject) (PutUserIdResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetHealth operation middleware
func (sh *strictHandler) GetHealth(ctx *fiber.Ctx) error {
	var request GetHealthRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealth(ctx.UserContext(), request.(GetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetHealthResponseObject); ok {
		if err := validResponse.VisitGetHealthResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetReady operation middleware
func (sh *strictHandler) GetReady(ctx *fiber.Ctx) error {
	var request GetReadyRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetReady(ctx.UserContext(), request.(GetReadyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetReady")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetReadyResponseObject); ok {
		if err := validResponse.VisitGetReadyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// LockEnvironment operation middleware
func (sh *strictHandler) LockEnvironment(ctx *fiber.Ctx, teamId TeamId, projectId ProjectId, environmentId EnvironmentId) error {
	var request LockEnvironmentRequestObject

	request.TeamId = teamId
	request.ProjectId = projectId
	request.EnvironmentId = environmentId

	var body LockEnvironmentJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.LockEnvironment(ctx.UserContext(), request.(LockEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LockEnvironment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(LockEnvironmentResponseObject); ok {
		if err := validResponse.VisitLockEnvironmentResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetEnvironmentState operation middleware
func (sh *strictHandler) GetEnvironmentState(ctx *fiber.Ctx, teamId TeamId, projectId ProjectId, environmentId EnvironmentId) error {
	var request GetEnvironmentStateRequestObject

	request.TeamId = teamId
	request.ProjectId = projectId
	request.EnvironmentId = environmentId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnvironmentState(ctx.UserContext(), request.(GetEnvironmentStateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnvironmentState")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetEnvironmentStateResponseObject); ok {
		if err := validResponse.VisitGetEnvironmentStateResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateEnvironmentState operation middleware
func (sh *strictHandler) UpdateEnvironmentState(ctx *fiber.Ctx, teamId TeamId, projectId ProjectId, environmentId EnvironmentId, params UpdateEnvironmentStateParams) error {
	var request UpdateEnvironmentStateRequestObject

	request.TeamId = teamId
	request.ProjectId = projectId
	request.EnvironmentId = environmentId
	request.Params = params

	var body UpdateEnvironmentStateJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateEnvironmentState(ctx.UserContext(), request.(UpdateEnvironmentStateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateEnvironmentState")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateEnvironmentStateResponseObject); ok {
		if err := validResponse.VisitUpdateEnvironmentStateResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UnlockEnvironment operation middleware
func (sh *strictHandler) UnlockEnvironment(ctx *fiber.Ctx, teamId TeamId, projectId ProjectId, environmentId EnvironmentId) error {
	var request UnlockEnvironmentRequestObject

	request.TeamId = teamId
	request.ProjectId = projectId
	request.EnvironmentId = environmentId

	var body UnlockEnvironmentJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UnlockEnvironment(ctx.UserContext(), request.(UnlockEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UnlockEnvironment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UnlockEnvironmentResponseObject); ok {
		if err := validResponse.VisitUnlockEnvironmentResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetProject operation middleware
func (sh *strictHandler) GetProject(ctx *fiber.Ctx, params GetProjectParams) error {
	var request GetProjectRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetProject(ctx.UserContext(), request.(GetProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetProjectResponseObject); ok {
		if err := validResponse.VisitGetProjectResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostProject operation middleware
func (sh *strictHandler) PostProject(ctx *fiber.Ctx) error {
	var request PostProjectRequestObject

	var body PostProjectJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostProject(ctx.UserContext(), request.(PostProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostProjectResponseObject); ok {
		if err := validResponse.VisitPostProjectResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteProjectId operation middleware
func (sh *strictHandler) DeleteProjectId(ctx *fiber.Ctx, id string) error {
	var request DeleteProjectIdRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectId(ctx.UserContext(), request.(DeleteProjectIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteProjectIdResponseObject); ok {
		if err := validResponse.VisitDeleteProjectIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetProjectId operation middleware
func (sh *strictHandler) GetProjectId(ctx *fiber.Ctx, id string) error {
	var request GetProjectIdRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectId(ctx.UserContext(), request.(GetProjectIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetProjectIdResponseObject); ok {
		if err := validResponse.VisitGetProjectIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutProjectId operation middleware
func (sh *strictHandler) PutProjectId(ctx *fiber.Ctx, id string) error {
	var request PutProjectIdRequestObject

	request.Id = id

	var body PutProjectIdJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PutProjectId(ctx.UserContext(), request.(PutProjectIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutProjectId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PutProjectIdResponseObject); ok {
		if err := validResponse.VisitPutProjectIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetProjectProjectIdEnvironment operation middleware
func (sh *strictHandler) GetProjectProjectIdEnvironment(ctx *fiber.Ctx, projectId string, params GetProjectProjectIdEnvironmentParams) error {
	var request GetProjectProjectIdEnvironmentRequestObject

	request.ProjectId = projectId
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectProjectIdEnvironment(ctx.UserContext(), request.(GetProjectProjectIdEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectProjectIdEnvironment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetProjectProjectIdEnvironmentResponseObject); ok {
		if err := validResponse.VisitGetProjectProjectIdEnvironmentResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostProjectProjectIdEnvironment operation middleware
func (sh *strictHandler) PostProjectProjectIdEnvironment(ctx *fiber.Ctx, projectId string) error {
	var request PostProjectProjectIdEnvironmentRequestObject

	request.ProjectId = projectId

	var body PostProjectProjectIdEnvironmentJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostProjectProjectIdEnvironment(ctx.UserContext(), request.(PostProjectProjectIdEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostProjectProjectIdEnvironment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostProjectProjectIdEnvironmentResponseObject); ok {
		if err := validResponse.VisitPostProjectProjectIdEnvironmentResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteProjectProjectIdEnvironmentEnvironmentId operation middleware
func (sh *strictHandler) DeleteProjectProjectIdEnvironmentEnvironmentId(ctx *fiber.Ctx, projectId string, environmentId string) error {
	var request DeleteProjectProjectIdEnvironmentEnvironmentIdRequestObject

	request.ProjectId = projectId
	request.EnvironmentId = environmentId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProjectProjectIdEnvironmentEnvironmentId(ctx.UserContext(), request.(DeleteProjectProjectIdEnvironmentEnvironmentIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProjectProjectIdEnvironmentEnvironmentId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteProjectProjectIdEnvironmentEnvironmentIdResponseObject); ok {
		if err := validResponse.VisitDeleteProjectProjectIdEnvironmentEnvironmentIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetProjectProjectIdEnvironmentEnvironmentId operation middleware
func (sh *strictHandler) GetProjectProjectIdEnvironmentEnvironmentId(ctx *fiber.Ctx, projectId string, environmentId string) error {
	var request GetProjectProjectIdEnvironmentEnvironmentIdRequestObject

	request.ProjectId = projectId
	request.EnvironmentId = environmentId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjectProjectIdEnvironmentEnvironmentId(ctx.UserContext(), request.(GetProjectProjectIdEnvironmentEnvironmentIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjectProjectIdEnvironmentEnvironmentId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetProjectProjectIdEnvironmentEnvironmentIdResponseObject); ok {
		if err := validResponse.VisitGetProjectProjectIdEnvironmentEnvironmentIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutProjectProjectIdEnvironmentEnvironmentId operation middleware
func (sh *strictHandler) PutProjectProjectIdEnvironmentEnvironmentId(ctx *fiber.Ctx, projectId string, environmentId string) error {
	var request PutProjectProjectIdEnvironmentEnvironmentIdRequestObject

	request.ProjectId = projectId
	request.EnvironmentId = environmentId

	var body PutProjectProjectIdEnvironmentEnvironmentIdJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PutProjectProjectIdEnvironmentEnvironmentId(ctx.UserContext(), request.(PutProjectProjectIdEnvironmentEnvironmentIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutProjectProjectIdEnvironmentEnvironmentId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PutProjectProjectIdEnvironmentEnvironmentIdResponseObject); ok {
		if err := validResponse.VisitPutProjectProjectIdEnvironmentEnvironmentIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetSnapshot operation middleware
func (sh *strictHandler) GetSnapshot(ctx *fiber.Ctx, params GetSnapshotParams) error {
	var request GetSnapshotRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetSnapshot(ctx.UserContext(), request.(GetSnapshotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSnapshot")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetSnapshotResponseObject); ok {
		if err := validResponse.VisitGetSnapshotResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateSnapshot operation middleware
func (sh *strictHandler) CreateSnapshot(ctx *fiber.Ctx) error {
	var request CreateSnapshotRequestObject

	var body CreateSnapshotJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSnapshot(ctx.UserContext(), request.(CreateSnapshotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSnapshot")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateSnapshotResponseObject); ok {
		if err := validResponse.VisitCreateSnapshotResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteSnapshotId operation middleware
func (sh *strictHandler) DeleteSnapshotId(ctx *fiber.Ctx, id string) error {
	var request DeleteSnapshotIdRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSnapshotId(ctx.UserContext(), request.(DeleteSnapshotIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSnapshotId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteSnapshotIdResponseObject); ok {
		if err := validResponse.VisitDeleteSnapshotIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetSnapshotId operation middleware
func (sh *strictHandler) GetSnapshotId(ctx *fiber.Ctx, id string) error {
	var request GetSnapshotIdRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetSnapshotId(ctx.UserContext(), request.(GetSnapshotIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSnapshotId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetSnapshotIdResponseObject); ok {
		if err := validResponse.VisitGetSnapshotIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutSnapshotId operation middleware
func (sh *strictHandler) PutSnapshotId(ctx *fiber.Ctx, id string) error {
	var request PutSnapshotIdRequestObject

	request.Id = id

	var body PutSnapshotIdJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PutSnapshotId(ctx.UserContext(), request.(PutSnapshotIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutSnapshotId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PutSnapshotIdResponseObject); ok {
		if err := validResponse.VisitPutSnapshotIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTaskId operation middleware
func (sh *strictHandler) GetTaskId(ctx *fiber.Ctx, id string) error {
	var request GetTaskIdRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetTaskId(ctx.UserContext(), request.(GetTaskIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTaskId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetTaskIdResponseObject); ok {
		if err := validResponse.VisitGetTaskIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTeam operation middleware
func (sh *strictHandler) GetTeam(ctx *fiber.Ctx, params GetTeamParams) error {
	var request GetTeamRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetTeam(ctx.UserContext(), request.(GetTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetTeamResponseObject); ok {
		if err := validResponse.VisitGetTeamResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTeam operation middleware
func (sh *strictHandler) PostTeam(ctx *fiber.Ctx) error {
	var request PostTeamRequestObject

	var body PostTeamJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostTeam(ctx.UserContext(), request.(PostTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostTeamResponseObject); ok {
		if err := validResponse.VisitPostTeamResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteTeamId operation middleware
func (sh *strictHandler) DeleteTeamId(ctx *fiber.Ctx, id string) error {
	var request DeleteTeamIdRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTeamId(ctx.UserContext(), request.(DeleteTeamIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTeamId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteTeamIdResponseObject); ok {
		if err := validResponse.VisitDeleteTeamIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTeamId operation middleware
func (sh *strictHandler) GetTeamId(ctx *fiber.Ctx, id string) error {
	var request GetTeamIdRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetTeamId(ctx.UserContext(), request.(GetTeamIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTeamId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetTeamIdResponseObject); ok {
		if err := validResponse.VisitGetTeamIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutTeamId operation middleware
func (sh *strictHandler) PutTeamId(ctx *fiber.Ctx, id string) error {
	var request PutTeamIdRequestObject

	request.Id = id

	var body PutTeamIdJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PutTeamId(ctx.UserContext(), request.(PutTeamIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutTeamId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PutTeamIdResponseObject); ok {
		if err := validResponse.VisitPutTeamIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUser operation middleware
func (sh *strictHandler) GetUser(ctx *fiber.Ctx, params GetUserParams) error {
	var request GetUserRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetUser(ctx.UserContext(), request.(GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetUserResponseObject); ok {
		if err := validResponse.VisitGetUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostUser operation middleware
func (sh *strictHandler) PostUser(ctx *fiber.Ctx) error {
	var request PostUserRequestObject

	var body PostUserJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostUser(ctx.UserContext(), request.(PostUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostUserResponseObject); ok {
		if err := validResponse.VisitPostUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteUserId operation middleware
func (sh *strictHandler) DeleteUserId(ctx *fiber.Ctx, id string) error {
	var request DeleteUserIdRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUserId(ctx.UserContext(), request.(DeleteUserIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUserId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteUserIdResponseObject); ok {
		if err := validResponse.VisitDeleteUserIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUserId operation middleware
func (sh *strictHandler) GetUserId(ctx *fiber.Ctx, id string) error {
	var request GetUserIdRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserId(ctx.UserContext(), request.(GetUserIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetUserIdResponseObject); ok {
		if err := validResponse.VisitGetUserIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutUserId operation middleware
func (sh *strictHandler) PutUserId(ctx *fiber.Ctx, id string) error {
	var request PutUserIdRequestObject

	request.Id = id

	var body PutUserIdJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PutUserId(ctx.UserContext(), request.(PutUserIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUserId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PutUserIdResponseObject); ok {
		if err := validResponse.VisitPutUserIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
