// Package apis provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package apis

import (
	"context"
	"fmt"
	"net/url"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get system health status
	// (GET /_health)
	GetHealth(c *fiber.Ctx) error
	// Get system readiness
	// (GET /_ready)
	GetReady(c *fiber.Ctx) error
	// Lock the state of Terraform environment
	// (POST /client/{teamId}/{projectId}/{environmentId}/lock)
	LockEnvironment(c *fiber.Ctx, teamId TeamId, projectId ProjectId, environmentId EnvironmentId) error
	// Get the state of Terraform environment
	// (GET /client/{teamId}/{projectId}/{environmentId}/state)
	GetEnvironmentState(c *fiber.Ctx, teamId TeamId, projectId ProjectId, environmentId EnvironmentId) error
	// Update the state of Terraform environment
	// (POST /client/{teamId}/{projectId}/{environmentId}/state)
	UpdateEnvironmentState(c *fiber.Ctx, teamId TeamId, projectId ProjectId, environmentId EnvironmentId, params UpdateEnvironmentStateParams) error
	// Unlock the state of Terraform environment
	// (POST /client/{teamId}/{projectId}/{environmentId}/unlock)
	UnlockEnvironment(c *fiber.Ctx, teamId TeamId, projectId ProjectId, environmentId EnvironmentId) error
	// Get a list of snapshots
	// (GET /snapshot)
	GetSnapshots(c *fiber.Ctx, params GetSnapshotsParams) error
	// Create a new snapshot
	// (POST /snapshot)
	CreateSnapshot(c *fiber.Ctx) error
	// Delete a snapshot
	// (DELETE /snapshot/{id})
	DeleteSnapshot(c *fiber.Ctx, id string) error
	// Get a snapshot
	// (GET /snapshot/{id})
	GetSnapshot(c *fiber.Ctx, id string) error
	// Update a snapshot
	// (PUT /snapshot/{id})
	UpdateSnapshot(c *fiber.Ctx, id string) error
	// Get a task
	// (GET /task/{id})
	GetTask(c *fiber.Ctx, id string) error
	// Get a list of teams
	// (GET /teams)
	GetTeams(c *fiber.Ctx, params GetTeamsParams) error
	// Create a new team
	// (POST /teams)
	CreateTeam(c *fiber.Ctx) error
	// Delete a team
	// (DELETE /teams/{teamId})
	DeleteTeam(c *fiber.Ctx, teamId TeamId) error
	// Get a team
	// (GET /teams/{teamId})
	GetTeam(c *fiber.Ctx, teamId TeamId) error
	// Update a team
	// (PUT /teams/{teamId})
	UpdateTeam(c *fiber.Ctx, teamId TeamId) error
	// Get a list of projects
	// (GET /teams/{teamId}/projects)
	GetProjects(c *fiber.Ctx, teamId TeamId, params GetProjectsParams) error
	// Create a new project
	// (POST /teams/{teamId}/projects)
	CreateProject(c *fiber.Ctx, teamId TeamId) error
	// Delete a project
	// (DELETE /teams/{teamId}/projects/{projectId})
	DeleteProject(c *fiber.Ctx, teamId TeamId, projectId ProjectId) error
	// Get a project
	// (GET /teams/{teamId}/projects/{projectId})
	GetProject(c *fiber.Ctx, teamId TeamId, projectId ProjectId) error
	// Update a project
	// (PUT /teams/{teamId}/projects/{projectId})
	UpdateProject(c *fiber.Ctx, teamId TeamId, projectId ProjectId) error
	// Get a list of environments
	// (GET /teams/{teamId}/projects/{projectId}/environments)
	GetEnvironments(c *fiber.Ctx, teamId TeamId, projectId ProjectId, params GetEnvironmentsParams) error
	// Create a new environment
	// (POST /teams/{teamId}/projects/{projectId}/environments)
	CreateEnvironment(c *fiber.Ctx, teamId TeamId, projectId ProjectId) error
	// Delete an environment
	// (DELETE /teams/{teamId}/projects/{projectId}/environments/{environmentId})
	DeleteEnvironment(c *fiber.Ctx, teamId TeamId, projectId ProjectId, environmentId EnvironmentId) error
	// Get an environment
	// (GET /teams/{teamId}/projects/{projectId}/environments/{environmentId})
	GetEnvironment(c *fiber.Ctx, teamId TeamId, projectId ProjectId, environmentId EnvironmentId) error
	// Update an environment
	// (PUT /teams/{teamId}/projects/{projectId}/environments/{environmentId})
	UpdateEnvironment(c *fiber.Ctx, teamId TeamId, projectId ProjectId, environmentId EnvironmentId) error
	// Get a list of users
	// (GET /user)
	GetUsers(c *fiber.Ctx, params GetUsersParams) error
	// Create a new user
	// (POST /user)
	PostUser(c *fiber.Ctx) error
	// Delete a user
	// (DELETE /user/{id})
	DeleteUser(c *fiber.Ctx, id string) error
	// Get a user
	// (GET /user/{id})
	GetUser(c *fiber.Ctx, id string) error
	// Update a user
	// (PUT /user/{id})
	UpdateUser(c *fiber.Ctx, id string) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *fiber.Ctx) error {

	return siw.Handler.GetHealth(c)
}

// GetReady operation middleware
func (siw *ServerInterfaceWrapper) GetReady(c *fiber.Ctx) error {

	return siw.Handler.GetReady(c)
}

// LockEnvironment operation middleware
func (siw *ServerInterfaceWrapper) LockEnvironment(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "environmentId" -------------
	var environmentId EnvironmentId

	err = runtime.BindStyledParameterWithOptions("simple", "environmentId", c.Params("environmentId"), &environmentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter environmentId: %w", err).Error())
	}

	c.Context().SetUserValue(BasicAuthScopes, []string{})

	return siw.Handler.LockEnvironment(c, teamId, projectId, environmentId)
}

// GetEnvironmentState operation middleware
func (siw *ServerInterfaceWrapper) GetEnvironmentState(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "environmentId" -------------
	var environmentId EnvironmentId

	err = runtime.BindStyledParameterWithOptions("simple", "environmentId", c.Params("environmentId"), &environmentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter environmentId: %w", err).Error())
	}

	c.Context().SetUserValue(BasicAuthScopes, []string{})

	return siw.Handler.GetEnvironmentState(c, teamId, projectId, environmentId)
}

// UpdateEnvironmentState operation middleware
func (siw *ServerInterfaceWrapper) UpdateEnvironmentState(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "environmentId" -------------
	var environmentId EnvironmentId

	err = runtime.BindStyledParameterWithOptions("simple", "environmentId", c.Params("environmentId"), &environmentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter environmentId: %w", err).Error())
	}

	c.Context().SetUserValue(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateEnvironmentStateParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "ID" -------------

	err = runtime.BindQueryParameter("form", true, false, "ID", query, &params.ID)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter ID: %w", err).Error())
	}

	return siw.Handler.UpdateEnvironmentState(c, teamId, projectId, environmentId, params)
}

// UnlockEnvironment operation middleware
func (siw *ServerInterfaceWrapper) UnlockEnvironment(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "environmentId" -------------
	var environmentId EnvironmentId

	err = runtime.BindStyledParameterWithOptions("simple", "environmentId", c.Params("environmentId"), &environmentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter environmentId: %w", err).Error())
	}

	c.Context().SetUserValue(BasicAuthScopes, []string{})

	return siw.Handler.UnlockEnvironment(c, teamId, projectId, environmentId)
}

// GetSnapshots operation middleware
func (siw *ServerInterfaceWrapper) GetSnapshots(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(OpenIDScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSnapshotsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetSnapshots(c, params)
}

// CreateSnapshot operation middleware
func (siw *ServerInterfaceWrapper) CreateSnapshot(c *fiber.Ctx) error {

	c.Context().SetUserValue(OpenIDScopes, []string{})

	return siw.Handler.CreateSnapshot(c)
}

// DeleteSnapshot operation middleware
func (siw *ServerInterfaceWrapper) DeleteSnapshot(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(OpenIDScopes, []string{})

	return siw.Handler.DeleteSnapshot(c, id)
}

// GetSnapshot operation middleware
func (siw *ServerInterfaceWrapper) GetSnapshot(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(OpenIDScopes, []string{})

	return siw.Handler.GetSnapshot(c, id)
}

// UpdateSnapshot operation middleware
func (siw *ServerInterfaceWrapper) UpdateSnapshot(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(OpenIDScopes, []string{})

	return siw.Handler.UpdateSnapshot(c, id)
}

// GetTask operation middleware
func (siw *ServerInterfaceWrapper) GetTask(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(OpenIDScopes, []string{})

	return siw.Handler.GetTask(c, id)
}

// GetTeams operation middleware
func (siw *ServerInterfaceWrapper) GetTeams(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(OpenIDScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTeamsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetTeams(c, params)
}

// CreateTeam operation middleware
func (siw *ServerInterfaceWrapper) CreateTeam(c *fiber.Ctx) error {

	c.Context().SetUserValue(OpenIDScopes, []string{})

	return siw.Handler.CreateTeam(c)
}

// DeleteTeam operation middleware
func (siw *ServerInterfaceWrapper) DeleteTeam(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	c.Context().SetUserValue(OpenIDScopes, []string{})

	return siw.Handler.DeleteTeam(c, teamId)
}

// GetTeam operation middleware
func (siw *ServerInterfaceWrapper) GetTeam(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	c.Context().SetUserValue(OpenIDScopes, []string{})

	return siw.Handler.GetTeam(c, teamId)
}

// UpdateTeam operation middleware
func (siw *ServerInterfaceWrapper) UpdateTeam(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	c.Context().SetUserValue(OpenIDScopes, []string{})

	return siw.Handler.UpdateTeam(c, teamId)
}

// GetProjects operation middleware
func (siw *ServerInterfaceWrapper) GetProjects(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	c.Context().SetUserValue(OpenIDScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProjectsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetProjects(c, teamId, params)
}

// CreateProject operation middleware
func (siw *ServerInterfaceWrapper) CreateProject(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	c.Context().SetUserValue(OpenIDScopes, []string{})

	return siw.Handler.CreateProject(c, teamId)
}

// DeleteProject operation middleware
func (siw *ServerInterfaceWrapper) DeleteProject(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(OpenIDScopes, []string{})

	return siw.Handler.DeleteProject(c, teamId, projectId)
}

// GetProject operation middleware
func (siw *ServerInterfaceWrapper) GetProject(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(OpenIDScopes, []string{})

	return siw.Handler.GetProject(c, teamId, projectId)
}

// UpdateProject operation middleware
func (siw *ServerInterfaceWrapper) UpdateProject(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(OpenIDScopes, []string{})

	return siw.Handler.UpdateProject(c, teamId, projectId)
}

// GetEnvironments operation middleware
func (siw *ServerInterfaceWrapper) GetEnvironments(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(OpenIDScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEnvironmentsParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetEnvironments(c, teamId, projectId, params)
}

// CreateEnvironment operation middleware
func (siw *ServerInterfaceWrapper) CreateEnvironment(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(OpenIDScopes, []string{})

	return siw.Handler.CreateEnvironment(c, teamId, projectId)
}

// DeleteEnvironment operation middleware
func (siw *ServerInterfaceWrapper) DeleteEnvironment(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "environmentId" -------------
	var environmentId EnvironmentId

	err = runtime.BindStyledParameterWithOptions("simple", "environmentId", c.Params("environmentId"), &environmentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter environmentId: %w", err).Error())
	}

	c.Context().SetUserValue(OpenIDScopes, []string{})

	return siw.Handler.DeleteEnvironment(c, teamId, projectId, environmentId)
}

// GetEnvironment operation middleware
func (siw *ServerInterfaceWrapper) GetEnvironment(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "environmentId" -------------
	var environmentId EnvironmentId

	err = runtime.BindStyledParameterWithOptions("simple", "environmentId", c.Params("environmentId"), &environmentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter environmentId: %w", err).Error())
	}

	c.Context().SetUserValue(OpenIDScopes, []string{})

	return siw.Handler.GetEnvironment(c, teamId, projectId, environmentId)
}

// UpdateEnvironment operation middleware
func (siw *ServerInterfaceWrapper) UpdateEnvironment(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "teamId" -------------
	var teamId TeamId

	err = runtime.BindStyledParameterWithOptions("simple", "teamId", c.Params("teamId"), &teamId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter teamId: %w", err).Error())
	}

	// ------------- Path parameter "projectId" -------------
	var projectId ProjectId

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "environmentId" -------------
	var environmentId EnvironmentId

	err = runtime.BindStyledParameterWithOptions("simple", "environmentId", c.Params("environmentId"), &environmentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter environmentId: %w", err).Error())
	}

	c.Context().SetUserValue(OpenIDScopes, []string{})

	return siw.Handler.UpdateEnvironment(c, teamId, projectId, environmentId)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(OpenIDScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetUsers(c, params)
}

// PostUser operation middleware
func (siw *ServerInterfaceWrapper) PostUser(c *fiber.Ctx) error {

	c.Context().SetUserValue(OpenIDScopes, []string{})

	return siw.Handler.PostUser(c)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(OpenIDScopes, []string{})

	return siw.Handler.DeleteUser(c, id)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(OpenIDScopes, []string{})

	return siw.Handler.GetUser(c, id)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(OpenIDScopes, []string{})

	return siw.Handler.UpdateUser(c, id)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/_health", wrapper.GetHealth)

	router.Get(options.BaseURL+"/_ready", wrapper.GetReady)

	router.Post(options.BaseURL+"/client/:teamId/:projectId/:environmentId/lock", wrapper.LockEnvironment)

	router.Get(options.BaseURL+"/client/:teamId/:projectId/:environmentId/state", wrapper.GetEnvironmentState)

	router.Post(options.BaseURL+"/client/:teamId/:projectId/:environmentId/state", wrapper.UpdateEnvironmentState)

	router.Post(options.BaseURL+"/client/:teamId/:projectId/:environmentId/unlock", wrapper.UnlockEnvironment)

	router.Get(options.BaseURL+"/snapshot", wrapper.GetSnapshots)

	router.Post(options.BaseURL+"/snapshot", wrapper.CreateSnapshot)

	router.Delete(options.BaseURL+"/snapshot/:id", wrapper.DeleteSnapshot)

	router.Get(options.BaseURL+"/snapshot/:id", wrapper.GetSnapshot)

	router.Put(options.BaseURL+"/snapshot/:id", wrapper.UpdateSnapshot)

	router.Get(options.BaseURL+"/task/:id", wrapper.GetTask)

	router.Get(options.BaseURL+"/teams", wrapper.GetTeams)

	router.Post(options.BaseURL+"/teams", wrapper.CreateTeam)

	router.Delete(options.BaseURL+"/teams/:teamId", wrapper.DeleteTeam)

	router.Get(options.BaseURL+"/teams/:teamId", wrapper.GetTeam)

	router.Put(options.BaseURL+"/teams/:teamId", wrapper.UpdateTeam)

	router.Get(options.BaseURL+"/teams/:teamId/projects", wrapper.GetProjects)

	router.Post(options.BaseURL+"/teams/:teamId/projects", wrapper.CreateProject)

	router.Delete(options.BaseURL+"/teams/:teamId/projects/:projectId", wrapper.DeleteProject)

	router.Get(options.BaseURL+"/teams/:teamId/projects/:projectId", wrapper.GetProject)

	router.Put(options.BaseURL+"/teams/:teamId/projects/:projectId", wrapper.UpdateProject)

	router.Get(options.BaseURL+"/teams/:teamId/projects/:projectId/environments", wrapper.GetEnvironments)

	router.Post(options.BaseURL+"/teams/:teamId/projects/:projectId/environments", wrapper.CreateEnvironment)

	router.Delete(options.BaseURL+"/teams/:teamId/projects/:projectId/environments/:environmentId", wrapper.DeleteEnvironment)

	router.Get(options.BaseURL+"/teams/:teamId/projects/:projectId/environments/:environmentId", wrapper.GetEnvironment)

	router.Put(options.BaseURL+"/teams/:teamId/projects/:projectId/environments/:environmentId", wrapper.UpdateEnvironment)

	router.Get(options.BaseURL+"/user", wrapper.GetUsers)

	router.Post(options.BaseURL+"/user", wrapper.PostUser)

	router.Delete(options.BaseURL+"/user/:id", wrapper.DeleteUser)

	router.Get(options.BaseURL+"/user/:id", wrapper.GetUser)

	router.Put(options.BaseURL+"/user/:id", wrapper.UpdateUser)

}

type GetHealthRequestObject struct {
}

type GetHealthResponseObject interface {
	VisitGetHealthResponse(ctx *fiber.Ctx) error
}

type GetHealth200JSONResponse HealthResponse

func (response GetHealth200JSONResponse) VisitGetHealthResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetHealth500JSONResponse HealthResponse

func (response GetHealth500JSONResponse) VisitGetHealthResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetReadyRequestObject struct {
}

type GetReadyResponseObject interface {
	VisitGetReadyResponse(ctx *fiber.Ctx) error
}

type GetReady200JSONResponse HealthResponse

func (response GetReady200JSONResponse) VisitGetReadyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetReady500JSONResponse HealthResponse

func (response GetReady500JSONResponse) VisitGetReadyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type LockEnvironmentRequestObject struct {
	TeamId        TeamId        `json:"teamId"`
	ProjectId     ProjectId     `json:"projectId"`
	EnvironmentId EnvironmentId `json:"environmentId"`
	Body          *LockEnvironmentJSONRequestBody
}

type LockEnvironmentResponseObject interface {
	VisitLockEnvironmentResponse(ctx *fiber.Ctx) error
}

type LockEnvironment200JSONResponse LockInfo

func (response LockEnvironment200JSONResponse) VisitLockEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type LockEnvironment404JSONResponse ErrorResponse

func (response LockEnvironment404JSONResponse) VisitLockEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type LockEnvironment500JSONResponse ErrorResponse

func (response LockEnvironment500JSONResponse) VisitLockEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetEnvironmentStateRequestObject struct {
	TeamId        TeamId        `json:"teamId"`
	ProjectId     ProjectId     `json:"projectId"`
	EnvironmentId EnvironmentId `json:"environmentId"`
}

type GetEnvironmentStateResponseObject interface {
	VisitGetEnvironmentStateResponse(ctx *fiber.Ctx) error
}

type GetEnvironmentState200JSONResponse Payload

func (response GetEnvironmentState200JSONResponse) VisitGetEnvironmentStateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetEnvironmentState404JSONResponse ErrorResponse

func (response GetEnvironmentState404JSONResponse) VisitGetEnvironmentStateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetEnvironmentState500JSONResponse ErrorResponse

func (response GetEnvironmentState500JSONResponse) VisitGetEnvironmentStateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type UpdateEnvironmentStateRequestObject struct {
	TeamId        TeamId        `json:"teamId"`
	ProjectId     ProjectId     `json:"projectId"`
	EnvironmentId EnvironmentId `json:"environmentId"`
	Params        UpdateEnvironmentStateParams
	Body          *UpdateEnvironmentStateJSONRequestBody
}

type UpdateEnvironmentStateResponseObject interface {
	VisitUpdateEnvironmentStateResponse(ctx *fiber.Ctx) error
}

type UpdateEnvironmentState200JSONResponse Payload

func (response UpdateEnvironmentState200JSONResponse) VisitUpdateEnvironmentStateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UpdateEnvironmentState404JSONResponse ErrorResponse

func (response UpdateEnvironmentState404JSONResponse) VisitUpdateEnvironmentStateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type UpdateEnvironmentState500JSONResponse ErrorResponse

func (response UpdateEnvironmentState500JSONResponse) VisitUpdateEnvironmentStateResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type UnlockEnvironmentRequestObject struct {
	TeamId        TeamId        `json:"teamId"`
	ProjectId     ProjectId     `json:"projectId"`
	EnvironmentId EnvironmentId `json:"environmentId"`
	Body          *UnlockEnvironmentJSONRequestBody
}

type UnlockEnvironmentResponseObject interface {
	VisitUnlockEnvironmentResponse(ctx *fiber.Ctx) error
}

type UnlockEnvironment200Response struct {
}

func (response UnlockEnvironment200Response) VisitUnlockEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type UnlockEnvironment204Response struct {
}

func (response UnlockEnvironment204Response) VisitUnlockEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type UnlockEnvironment404JSONResponse ErrorResponse

func (response UnlockEnvironment404JSONResponse) VisitUnlockEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type UnlockEnvironment500JSONResponse ErrorResponse

func (response UnlockEnvironment500JSONResponse) VisitUnlockEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetSnapshotsRequestObject struct {
	Params GetSnapshotsParams
}

type GetSnapshotsResponseObject interface {
	VisitGetSnapshotsResponse(ctx *fiber.Ctx) error
}

type GetSnapshots200JSONResponse struct {
	Metadata *struct {
		Limit      *int `json:"limit,omitempty"`
		Offset     *int `json:"offset,omitempty"`
		TotalCount *int `json:"totalCount,omitempty"`
	} `json:"metadata,omitempty"`
	Snapshots *[]Snapshot `json:"snapshots,omitempty"`
}

func (response GetSnapshots200JSONResponse) VisitGetSnapshotsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetSnapshots500JSONResponse ErrorResponse

func (response GetSnapshots500JSONResponse) VisitGetSnapshotsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type CreateSnapshotRequestObject struct {
	Body *CreateSnapshotJSONRequestBody
}

type CreateSnapshotResponseObject interface {
	VisitCreateSnapshotResponse(ctx *fiber.Ctx) error
}

type CreateSnapshot201JSONResponse Snapshot

func (response CreateSnapshot201JSONResponse) VisitCreateSnapshotResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type CreateSnapshot500JSONResponse ErrorResponse

func (response CreateSnapshot500JSONResponse) VisitCreateSnapshotResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeleteSnapshotRequestObject struct {
	Id string `json:"id"`
}

type DeleteSnapshotResponseObject interface {
	VisitDeleteSnapshotResponse(ctx *fiber.Ctx) error
}

type DeleteSnapshot204Response struct {
}

func (response DeleteSnapshot204Response) VisitDeleteSnapshotResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type DeleteSnapshot404JSONResponse ErrorResponse

func (response DeleteSnapshot404JSONResponse) VisitDeleteSnapshotResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type DeleteSnapshot500JSONResponse ErrorResponse

func (response DeleteSnapshot500JSONResponse) VisitDeleteSnapshotResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetSnapshotRequestObject struct {
	Id string `json:"id"`
}

type GetSnapshotResponseObject interface {
	VisitGetSnapshotResponse(ctx *fiber.Ctx) error
}

type GetSnapshot200JSONResponse Snapshot

func (response GetSnapshot200JSONResponse) VisitGetSnapshotResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetSnapshot404JSONResponse ErrorResponse

func (response GetSnapshot404JSONResponse) VisitGetSnapshotResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetSnapshot500JSONResponse ErrorResponse

func (response GetSnapshot500JSONResponse) VisitGetSnapshotResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type UpdateSnapshotRequestObject struct {
	Id   string `json:"id"`
	Body *UpdateSnapshotJSONRequestBody
}

type UpdateSnapshotResponseObject interface {
	VisitUpdateSnapshotResponse(ctx *fiber.Ctx) error
}

type UpdateSnapshot200JSONResponse Snapshot

func (response UpdateSnapshot200JSONResponse) VisitUpdateSnapshotResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UpdateSnapshot404JSONResponse ErrorResponse

func (response UpdateSnapshot404JSONResponse) VisitUpdateSnapshotResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type UpdateSnapshot500JSONResponse ErrorResponse

func (response UpdateSnapshot500JSONResponse) VisitUpdateSnapshotResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetTaskRequestObject struct {
	Id string `json:"id"`
}

type GetTaskResponseObject interface {
	VisitGetTaskResponse(ctx *fiber.Ctx) error
}

type GetTask200JSONResponse Task

func (response GetTask200JSONResponse) VisitGetTaskResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetTask404JSONResponse ErrorResponse

func (response GetTask404JSONResponse) VisitGetTaskResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetTask500JSONResponse ErrorResponse

func (response GetTask500JSONResponse) VisitGetTaskResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetTeamsRequestObject struct {
	Params GetTeamsParams
}

type GetTeamsResponseObject interface {
	VisitGetTeamsResponse(ctx *fiber.Ctx) error
}

type GetTeams200JSONResponse struct {
	Metadata *struct {
		Limit      *int `json:"limit,omitempty"`
		Offset     *int `json:"offset,omitempty"`
		TotalCount *int `json:"totalCount,omitempty"`
	} `json:"metadata,omitempty"`
	Teams *[]Team `json:"teams,omitempty"`
}

func (response GetTeams200JSONResponse) VisitGetTeamsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetTeams500JSONResponse ErrorResponse

func (response GetTeams500JSONResponse) VisitGetTeamsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type CreateTeamRequestObject struct {
	Body *CreateTeamJSONRequestBody
}

type CreateTeamResponseObject interface {
	VisitCreateTeamResponse(ctx *fiber.Ctx) error
}

type CreateTeam201JSONResponse Team

func (response CreateTeam201JSONResponse) VisitCreateTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type CreateTeam500JSONResponse ErrorResponse

func (response CreateTeam500JSONResponse) VisitCreateTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeleteTeamRequestObject struct {
	TeamId TeamId `json:"teamId"`
}

type DeleteTeamResponseObject interface {
	VisitDeleteTeamResponse(ctx *fiber.Ctx) error
}

type DeleteTeam204Response struct {
}

func (response DeleteTeam204Response) VisitDeleteTeamResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type DeleteTeam404JSONResponse ErrorResponse

func (response DeleteTeam404JSONResponse) VisitDeleteTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type DeleteTeam500JSONResponse ErrorResponse

func (response DeleteTeam500JSONResponse) VisitDeleteTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetTeamRequestObject struct {
	TeamId TeamId `json:"teamId"`
}

type GetTeamResponseObject interface {
	VisitGetTeamResponse(ctx *fiber.Ctx) error
}

type GetTeam200JSONResponse Team

func (response GetTeam200JSONResponse) VisitGetTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetTeam404JSONResponse ErrorResponse

func (response GetTeam404JSONResponse) VisitGetTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetTeam500JSONResponse ErrorResponse

func (response GetTeam500JSONResponse) VisitGetTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type UpdateTeamRequestObject struct {
	TeamId TeamId `json:"teamId"`
	Body   *UpdateTeamJSONRequestBody
}

type UpdateTeamResponseObject interface {
	VisitUpdateTeamResponse(ctx *fiber.Ctx) error
}

type UpdateTeam200JSONResponse Team

func (response UpdateTeam200JSONResponse) VisitUpdateTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UpdateTeam404JSONResponse ErrorResponse

func (response UpdateTeam404JSONResponse) VisitUpdateTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type UpdateTeam500JSONResponse ErrorResponse

func (response UpdateTeam500JSONResponse) VisitUpdateTeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetProjectsRequestObject struct {
	TeamId TeamId `json:"teamId"`
	Params GetProjectsParams
}

type GetProjectsResponseObject interface {
	VisitGetProjectsResponse(ctx *fiber.Ctx) error
}

type GetProjects200JSONResponse struct {
	Metadata *struct {
		Limit      *int `json:"limit,omitempty"`
		Offset     *int `json:"offset,omitempty"`
		TotalCount *int `json:"totalCount,omitempty"`
	} `json:"metadata,omitempty"`
	Projects *[]Project `json:"projects,omitempty"`
}

func (response GetProjects200JSONResponse) VisitGetProjectsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetProjects500JSONResponse ErrorResponse

func (response GetProjects500JSONResponse) VisitGetProjectsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type CreateProjectRequestObject struct {
	TeamId TeamId `json:"teamId"`
	Body   *CreateProjectJSONRequestBody
}

type CreateProjectResponseObject interface {
	VisitCreateProjectResponse(ctx *fiber.Ctx) error
}

type CreateProject201JSONResponse Project

func (response CreateProject201JSONResponse) VisitCreateProjectResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type CreateProject500JSONResponse ErrorResponse

func (response CreateProject500JSONResponse) VisitCreateProjectResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeleteProjectRequestObject struct {
	TeamId    TeamId    `json:"teamId"`
	ProjectId ProjectId `json:"projectId"`
}

type DeleteProjectResponseObject interface {
	VisitDeleteProjectResponse(ctx *fiber.Ctx) error
}

type DeleteProject204Response struct {
}

func (response DeleteProject204Response) VisitDeleteProjectResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type DeleteProject404JSONResponse ErrorResponse

func (response DeleteProject404JSONResponse) VisitDeleteProjectResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type DeleteProject500JSONResponse ErrorResponse

func (response DeleteProject500JSONResponse) VisitDeleteProjectResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetProjectRequestObject struct {
	TeamId    TeamId    `json:"teamId"`
	ProjectId ProjectId `json:"projectId"`
}

type GetProjectResponseObject interface {
	VisitGetProjectResponse(ctx *fiber.Ctx) error
}

type GetProject200JSONResponse Project

func (response GetProject200JSONResponse) VisitGetProjectResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetProject404JSONResponse ErrorResponse

func (response GetProject404JSONResponse) VisitGetProjectResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetProject500JSONResponse ErrorResponse

func (response GetProject500JSONResponse) VisitGetProjectResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type UpdateProjectRequestObject struct {
	TeamId    TeamId    `json:"teamId"`
	ProjectId ProjectId `json:"projectId"`
	Body      *UpdateProjectJSONRequestBody
}

type UpdateProjectResponseObject interface {
	VisitUpdateProjectResponse(ctx *fiber.Ctx) error
}

type UpdateProject200JSONResponse Project

func (response UpdateProject200JSONResponse) VisitUpdateProjectResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UpdateProject404JSONResponse ErrorResponse

func (response UpdateProject404JSONResponse) VisitUpdateProjectResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type UpdateProject500JSONResponse ErrorResponse

func (response UpdateProject500JSONResponse) VisitUpdateProjectResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetEnvironmentsRequestObject struct {
	TeamId    TeamId    `json:"teamId"`
	ProjectId ProjectId `json:"projectId"`
	Params    GetEnvironmentsParams
}

type GetEnvironmentsResponseObject interface {
	VisitGetEnvironmentsResponse(ctx *fiber.Ctx) error
}

type GetEnvironments200JSONResponse struct {
	Environments *[]Environment `json:"environments,omitempty"`
	Metadata     *struct {
		Limit      *int `json:"limit,omitempty"`
		Offset     *int `json:"offset,omitempty"`
		TotalCount *int `json:"totalCount,omitempty"`
	} `json:"metadata,omitempty"`
}

func (response GetEnvironments200JSONResponse) VisitGetEnvironmentsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetEnvironments500JSONResponse ErrorResponse

func (response GetEnvironments500JSONResponse) VisitGetEnvironmentsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type CreateEnvironmentRequestObject struct {
	TeamId    TeamId    `json:"teamId"`
	ProjectId ProjectId `json:"projectId"`
	Body      *CreateEnvironmentJSONRequestBody
}

type CreateEnvironmentResponseObject interface {
	VisitCreateEnvironmentResponse(ctx *fiber.Ctx) error
}

type CreateEnvironment201JSONResponse Environment

func (response CreateEnvironment201JSONResponse) VisitCreateEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type CreateEnvironment500JSONResponse ErrorResponse

func (response CreateEnvironment500JSONResponse) VisitCreateEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeleteEnvironmentRequestObject struct {
	TeamId        TeamId        `json:"teamId"`
	ProjectId     ProjectId     `json:"projectId"`
	EnvironmentId EnvironmentId `json:"environmentId"`
}

type DeleteEnvironmentResponseObject interface {
	VisitDeleteEnvironmentResponse(ctx *fiber.Ctx) error
}

type DeleteEnvironment204Response struct {
}

func (response DeleteEnvironment204Response) VisitDeleteEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type DeleteEnvironment404JSONResponse ErrorResponse

func (response DeleteEnvironment404JSONResponse) VisitDeleteEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type DeleteEnvironment500JSONResponse ErrorResponse

func (response DeleteEnvironment500JSONResponse) VisitDeleteEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetEnvironmentRequestObject struct {
	TeamId        TeamId        `json:"teamId"`
	ProjectId     ProjectId     `json:"projectId"`
	EnvironmentId EnvironmentId `json:"environmentId"`
}

type GetEnvironmentResponseObject interface {
	VisitGetEnvironmentResponse(ctx *fiber.Ctx) error
}

type GetEnvironment200JSONResponse Environment

func (response GetEnvironment200JSONResponse) VisitGetEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetEnvironment404JSONResponse ErrorResponse

func (response GetEnvironment404JSONResponse) VisitGetEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetEnvironment500JSONResponse ErrorResponse

func (response GetEnvironment500JSONResponse) VisitGetEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type UpdateEnvironmentRequestObject struct {
	TeamId        TeamId        `json:"teamId"`
	ProjectId     ProjectId     `json:"projectId"`
	EnvironmentId EnvironmentId `json:"environmentId"`
	Body          *UpdateEnvironmentJSONRequestBody
}

type UpdateEnvironmentResponseObject interface {
	VisitUpdateEnvironmentResponse(ctx *fiber.Ctx) error
}

type UpdateEnvironment200JSONResponse Environment

func (response UpdateEnvironment200JSONResponse) VisitUpdateEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UpdateEnvironment404JSONResponse ErrorResponse

func (response UpdateEnvironment404JSONResponse) VisitUpdateEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type UpdateEnvironment500JSONResponse ErrorResponse

func (response UpdateEnvironment500JSONResponse) VisitUpdateEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetUsersRequestObject struct {
	Params GetUsersParams
}

type GetUsersResponseObject interface {
	VisitGetUsersResponse(ctx *fiber.Ctx) error
}

type GetUsers200JSONResponse struct {
	Metadata *struct {
		Limit      *int `json:"limit,omitempty"`
		Offset     *int `json:"offset,omitempty"`
		TotalCount *int `json:"totalCount,omitempty"`
	} `json:"metadata,omitempty"`
	Users *[]User `json:"users,omitempty"`
}

func (response GetUsers200JSONResponse) VisitGetUsersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetUsers500JSONResponse ErrorResponse

func (response GetUsers500JSONResponse) VisitGetUsersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostUserRequestObject struct {
	Body *PostUserJSONRequestBody
}

type PostUserResponseObject interface {
	VisitPostUserResponse(ctx *fiber.Ctx) error
}

type PostUser201JSONResponse User

func (response PostUser201JSONResponse) VisitPostUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type PostUser500JSONResponse ErrorResponse

func (response PostUser500JSONResponse) VisitPostUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeleteUserRequestObject struct {
	Id string `json:"id"`
}

type DeleteUserResponseObject interface {
	VisitDeleteUserResponse(ctx *fiber.Ctx) error
}

type DeleteUser204Response struct {
}

func (response DeleteUser204Response) VisitDeleteUserResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type DeleteUser404JSONResponse ErrorResponse

func (response DeleteUser404JSONResponse) VisitDeleteUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type DeleteUser500JSONResponse ErrorResponse

func (response DeleteUser500JSONResponse) VisitDeleteUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetUserRequestObject struct {
	Id string `json:"id"`
}

type GetUserResponseObject interface {
	VisitGetUserResponse(ctx *fiber.Ctx) error
}

type GetUser200JSONResponse User

func (response GetUser200JSONResponse) VisitGetUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetUser404JSONResponse ErrorResponse

func (response GetUser404JSONResponse) VisitGetUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetUser500JSONResponse ErrorResponse

func (response GetUser500JSONResponse) VisitGetUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type UpdateUserRequestObject struct {
	Id   string `json:"id"`
	Body *UpdateUserJSONRequestBody
}

type UpdateUserResponseObject interface {
	VisitUpdateUserResponse(ctx *fiber.Ctx) error
}

type UpdateUser200JSONResponse User

func (response UpdateUser200JSONResponse) VisitUpdateUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UpdateUser404JSONResponse ErrorResponse

func (response UpdateUser404JSONResponse) VisitUpdateUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type UpdateUser500JSONResponse ErrorResponse

func (response UpdateUser500JSONResponse) VisitUpdateUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get system health status
	// (GET /_health)
	GetHealth(ctx context.Context, request GetHealthRequestObject) (GetHealthResponseObject, error)
	// Get system readiness
	// (GET /_ready)
	GetReady(ctx context.Context, request GetReadyRequestObject) (GetReadyResponseObject, error)
	// Lock the state of Terraform environment
	// (POST /client/{teamId}/{projectId}/{environmentId}/lock)
	LockEnvironment(ctx context.Context, request LockEnvironmentRequestObject) (LockEnvironmentResponseObject, error)
	// Get the state of Terraform environment
	// (GET /client/{teamId}/{projectId}/{environmentId}/state)
	GetEnvironmentState(ctx context.Context, request GetEnvironmentStateRequestObject) (GetEnvironmentStateResponseObject, error)
	// Update the state of Terraform environment
	// (POST /client/{teamId}/{projectId}/{environmentId}/state)
	UpdateEnvironmentState(ctx context.Context, request UpdateEnvironmentStateRequestObject) (UpdateEnvironmentStateResponseObject, error)
	// Unlock the state of Terraform environment
	// (POST /client/{teamId}/{projectId}/{environmentId}/unlock)
	UnlockEnvironment(ctx context.Context, request UnlockEnvironmentRequestObject) (UnlockEnvironmentResponseObject, error)
	// Get a list of snapshots
	// (GET /snapshot)
	GetSnapshots(ctx context.Context, request GetSnapshotsRequestObject) (GetSnapshotsResponseObject, error)
	// Create a new snapshot
	// (POST /snapshot)
	CreateSnapshot(ctx context.Context, request CreateSnapshotRequestObject) (CreateSnapshotResponseObject, error)
	// Delete a snapshot
	// (DELETE /snapshot/{id})
	DeleteSnapshot(ctx context.Context, request DeleteSnapshotRequestObject) (DeleteSnapshotResponseObject, error)
	// Get a snapshot
	// (GET /snapshot/{id})
	GetSnapshot(ctx context.Context, request GetSnapshotRequestObject) (GetSnapshotResponseObject, error)
	// Update a snapshot
	// (PUT /snapshot/{id})
	UpdateSnapshot(ctx context.Context, request UpdateSnapshotRequestObject) (UpdateSnapshotResponseObject, error)
	// Get a task
	// (GET /task/{id})
	GetTask(ctx context.Context, request GetTaskRequestObject) (GetTaskResponseObject, error)
	// Get a list of teams
	// (GET /teams)
	GetTeams(ctx context.Context, request GetTeamsRequestObject) (GetTeamsResponseObject, error)
	// Create a new team
	// (POST /teams)
	CreateTeam(ctx context.Context, request CreateTeamRequestObject) (CreateTeamResponseObject, error)
	// Delete a team
	// (DELETE /teams/{teamId})
	DeleteTeam(ctx context.Context, request DeleteTeamRequestObject) (DeleteTeamResponseObject, error)
	// Get a team
	// (GET /teams/{teamId})
	GetTeam(ctx context.Context, request GetTeamRequestObject) (GetTeamResponseObject, error)
	// Update a team
	// (PUT /teams/{teamId})
	UpdateTeam(ctx context.Context, request UpdateTeamRequestObject) (UpdateTeamResponseObject, error)
	// Get a list of projects
	// (GET /teams/{teamId}/projects)
	GetProjects(ctx context.Context, request GetProjectsRequestObject) (GetProjectsResponseObject, error)
	// Create a new project
	// (POST /teams/{teamId}/projects)
	CreateProject(ctx context.Context, request CreateProjectRequestObject) (CreateProjectResponseObject, error)
	// Delete a project
	// (DELETE /teams/{teamId}/projects/{projectId})
	DeleteProject(ctx context.Context, request DeleteProjectRequestObject) (DeleteProjectResponseObject, error)
	// Get a project
	// (GET /teams/{teamId}/projects/{projectId})
	GetProject(ctx context.Context, request GetProjectRequestObject) (GetProjectResponseObject, error)
	// Update a project
	// (PUT /teams/{teamId}/projects/{projectId})
	UpdateProject(ctx context.Context, request UpdateProjectRequestObject) (UpdateProjectResponseObject, error)
	// Get a list of environments
	// (GET /teams/{teamId}/projects/{projectId}/environments)
	GetEnvironments(ctx context.Context, request GetEnvironmentsRequestObject) (GetEnvironmentsResponseObject, error)
	// Create a new environment
	// (POST /teams/{teamId}/projects/{projectId}/environments)
	CreateEnvironment(ctx context.Context, request CreateEnvironmentRequestObject) (CreateEnvironmentResponseObject, error)
	// Delete an environment
	// (DELETE /teams/{teamId}/projects/{projectId}/environments/{environmentId})
	DeleteEnvironment(ctx context.Context, request DeleteEnvironmentRequestObject) (DeleteEnvironmentResponseObject, error)
	// Get an environment
	// (GET /teams/{teamId}/projects/{projectId}/environments/{environmentId})
	GetEnvironment(ctx context.Context, request GetEnvironmentRequestObject) (GetEnvironmentResponseObject, error)
	// Update an environment
	// (PUT /teams/{teamId}/projects/{projectId}/environments/{environmentId})
	UpdateEnvironment(ctx context.Context, request UpdateEnvironmentRequestObject) (UpdateEnvironmentResponseObject, error)
	// Get a list of users
	// (GET /user)
	GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)
	// Create a new user
	// (POST /user)
	PostUser(ctx context.Context, request PostUserRequestObject) (PostUserResponseObject, error)
	// Delete a user
	// (DELETE /user/{id})
	DeleteUser(ctx context.Context, request DeleteUserRequestObject) (DeleteUserResponseObject, error)
	// Get a user
	// (GET /user/{id})
	GetUser(ctx context.Context, request GetUserRequestObject) (GetUserResponseObject, error)
	// Update a user
	// (PUT /user/{id})
	UpdateUser(ctx context.Context, request UpdateUserRequestObject) (UpdateUserResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetHealth operation middleware
func (sh *strictHandler) GetHealth(ctx *fiber.Ctx) error {
	var request GetHealthRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealth(ctx.UserContext(), request.(GetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetHealthResponseObject); ok {
		if err := validResponse.VisitGetHealthResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetReady operation middleware
func (sh *strictHandler) GetReady(ctx *fiber.Ctx) error {
	var request GetReadyRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetReady(ctx.UserContext(), request.(GetReadyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetReady")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetReadyResponseObject); ok {
		if err := validResponse.VisitGetReadyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// LockEnvironment operation middleware
func (sh *strictHandler) LockEnvironment(ctx *fiber.Ctx, teamId TeamId, projectId ProjectId, environmentId EnvironmentId) error {
	var request LockEnvironmentRequestObject

	request.TeamId = teamId
	request.ProjectId = projectId
	request.EnvironmentId = environmentId

	var body LockEnvironmentJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.LockEnvironment(ctx.UserContext(), request.(LockEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LockEnvironment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(LockEnvironmentResponseObject); ok {
		if err := validResponse.VisitLockEnvironmentResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetEnvironmentState operation middleware
func (sh *strictHandler) GetEnvironmentState(ctx *fiber.Ctx, teamId TeamId, projectId ProjectId, environmentId EnvironmentId) error {
	var request GetEnvironmentStateRequestObject

	request.TeamId = teamId
	request.ProjectId = projectId
	request.EnvironmentId = environmentId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnvironmentState(ctx.UserContext(), request.(GetEnvironmentStateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnvironmentState")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetEnvironmentStateResponseObject); ok {
		if err := validResponse.VisitGetEnvironmentStateResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateEnvironmentState operation middleware
func (sh *strictHandler) UpdateEnvironmentState(ctx *fiber.Ctx, teamId TeamId, projectId ProjectId, environmentId EnvironmentId, params UpdateEnvironmentStateParams) error {
	var request UpdateEnvironmentStateRequestObject

	request.TeamId = teamId
	request.ProjectId = projectId
	request.EnvironmentId = environmentId
	request.Params = params

	var body UpdateEnvironmentStateJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateEnvironmentState(ctx.UserContext(), request.(UpdateEnvironmentStateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateEnvironmentState")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateEnvironmentStateResponseObject); ok {
		if err := validResponse.VisitUpdateEnvironmentStateResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UnlockEnvironment operation middleware
func (sh *strictHandler) UnlockEnvironment(ctx *fiber.Ctx, teamId TeamId, projectId ProjectId, environmentId EnvironmentId) error {
	var request UnlockEnvironmentRequestObject

	request.TeamId = teamId
	request.ProjectId = projectId
	request.EnvironmentId = environmentId

	var body UnlockEnvironmentJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UnlockEnvironment(ctx.UserContext(), request.(UnlockEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UnlockEnvironment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UnlockEnvironmentResponseObject); ok {
		if err := validResponse.VisitUnlockEnvironmentResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetSnapshots operation middleware
func (sh *strictHandler) GetSnapshots(ctx *fiber.Ctx, params GetSnapshotsParams) error {
	var request GetSnapshotsRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetSnapshots(ctx.UserContext(), request.(GetSnapshotsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSnapshots")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetSnapshotsResponseObject); ok {
		if err := validResponse.VisitGetSnapshotsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateSnapshot operation middleware
func (sh *strictHandler) CreateSnapshot(ctx *fiber.Ctx) error {
	var request CreateSnapshotRequestObject

	var body CreateSnapshotJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSnapshot(ctx.UserContext(), request.(CreateSnapshotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSnapshot")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateSnapshotResponseObject); ok {
		if err := validResponse.VisitCreateSnapshotResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteSnapshot operation middleware
func (sh *strictHandler) DeleteSnapshot(ctx *fiber.Ctx, id string) error {
	var request DeleteSnapshotRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSnapshot(ctx.UserContext(), request.(DeleteSnapshotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSnapshot")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteSnapshotResponseObject); ok {
		if err := validResponse.VisitDeleteSnapshotResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetSnapshot operation middleware
func (sh *strictHandler) GetSnapshot(ctx *fiber.Ctx, id string) error {
	var request GetSnapshotRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetSnapshot(ctx.UserContext(), request.(GetSnapshotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSnapshot")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetSnapshotResponseObject); ok {
		if err := validResponse.VisitGetSnapshotResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateSnapshot operation middleware
func (sh *strictHandler) UpdateSnapshot(ctx *fiber.Ctx, id string) error {
	var request UpdateSnapshotRequestObject

	request.Id = id

	var body UpdateSnapshotJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSnapshot(ctx.UserContext(), request.(UpdateSnapshotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSnapshot")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateSnapshotResponseObject); ok {
		if err := validResponse.VisitUpdateSnapshotResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTask operation middleware
func (sh *strictHandler) GetTask(ctx *fiber.Ctx, id string) error {
	var request GetTaskRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetTask(ctx.UserContext(), request.(GetTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTask")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetTaskResponseObject); ok {
		if err := validResponse.VisitGetTaskResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTeams operation middleware
func (sh *strictHandler) GetTeams(ctx *fiber.Ctx, params GetTeamsParams) error {
	var request GetTeamsRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetTeams(ctx.UserContext(), request.(GetTeamsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTeams")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetTeamsResponseObject); ok {
		if err := validResponse.VisitGetTeamsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateTeam operation middleware
func (sh *strictHandler) CreateTeam(ctx *fiber.Ctx) error {
	var request CreateTeamRequestObject

	var body CreateTeamJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTeam(ctx.UserContext(), request.(CreateTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateTeamResponseObject); ok {
		if err := validResponse.VisitCreateTeamResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteTeam operation middleware
func (sh *strictHandler) DeleteTeam(ctx *fiber.Ctx, teamId TeamId) error {
	var request DeleteTeamRequestObject

	request.TeamId = teamId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTeam(ctx.UserContext(), request.(DeleteTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteTeamResponseObject); ok {
		if err := validResponse.VisitDeleteTeamResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTeam operation middleware
func (sh *strictHandler) GetTeam(ctx *fiber.Ctx, teamId TeamId) error {
	var request GetTeamRequestObject

	request.TeamId = teamId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetTeam(ctx.UserContext(), request.(GetTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetTeamResponseObject); ok {
		if err := validResponse.VisitGetTeamResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateTeam operation middleware
func (sh *strictHandler) UpdateTeam(ctx *fiber.Ctx, teamId TeamId) error {
	var request UpdateTeamRequestObject

	request.TeamId = teamId

	var body UpdateTeamJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTeam(ctx.UserContext(), request.(UpdateTeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateTeam")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateTeamResponseObject); ok {
		if err := validResponse.VisitUpdateTeamResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetProjects operation middleware
func (sh *strictHandler) GetProjects(ctx *fiber.Ctx, teamId TeamId, params GetProjectsParams) error {
	var request GetProjectsRequestObject

	request.TeamId = teamId
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjects(ctx.UserContext(), request.(GetProjectsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjects")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetProjectsResponseObject); ok {
		if err := validResponse.VisitGetProjectsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateProject operation middleware
func (sh *strictHandler) CreateProject(ctx *fiber.Ctx, teamId TeamId) error {
	var request CreateProjectRequestObject

	request.TeamId = teamId

	var body CreateProjectJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProject(ctx.UserContext(), request.(CreateProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateProjectResponseObject); ok {
		if err := validResponse.VisitCreateProjectResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteProject operation middleware
func (sh *strictHandler) DeleteProject(ctx *fiber.Ctx, teamId TeamId, projectId ProjectId) error {
	var request DeleteProjectRequestObject

	request.TeamId = teamId
	request.ProjectId = projectId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProject(ctx.UserContext(), request.(DeleteProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteProjectResponseObject); ok {
		if err := validResponse.VisitDeleteProjectResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetProject operation middleware
func (sh *strictHandler) GetProject(ctx *fiber.Ctx, teamId TeamId, projectId ProjectId) error {
	var request GetProjectRequestObject

	request.TeamId = teamId
	request.ProjectId = projectId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetProject(ctx.UserContext(), request.(GetProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetProjectResponseObject); ok {
		if err := validResponse.VisitGetProjectResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateProject operation middleware
func (sh *strictHandler) UpdateProject(ctx *fiber.Ctx, teamId TeamId, projectId ProjectId) error {
	var request UpdateProjectRequestObject

	request.TeamId = teamId
	request.ProjectId = projectId

	var body UpdateProjectJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateProject(ctx.UserContext(), request.(UpdateProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateProjectResponseObject); ok {
		if err := validResponse.VisitUpdateProjectResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetEnvironments operation middleware
func (sh *strictHandler) GetEnvironments(ctx *fiber.Ctx, teamId TeamId, projectId ProjectId, params GetEnvironmentsParams) error {
	var request GetEnvironmentsRequestObject

	request.TeamId = teamId
	request.ProjectId = projectId
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnvironments(ctx.UserContext(), request.(GetEnvironmentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnvironments")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetEnvironmentsResponseObject); ok {
		if err := validResponse.VisitGetEnvironmentsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateEnvironment operation middleware
func (sh *strictHandler) CreateEnvironment(ctx *fiber.Ctx, teamId TeamId, projectId ProjectId) error {
	var request CreateEnvironmentRequestObject

	request.TeamId = teamId
	request.ProjectId = projectId

	var body CreateEnvironmentJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateEnvironment(ctx.UserContext(), request.(CreateEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateEnvironment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateEnvironmentResponseObject); ok {
		if err := validResponse.VisitCreateEnvironmentResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteEnvironment operation middleware
func (sh *strictHandler) DeleteEnvironment(ctx *fiber.Ctx, teamId TeamId, projectId ProjectId, environmentId EnvironmentId) error {
	var request DeleteEnvironmentRequestObject

	request.TeamId = teamId
	request.ProjectId = projectId
	request.EnvironmentId = environmentId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteEnvironment(ctx.UserContext(), request.(DeleteEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteEnvironment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteEnvironmentResponseObject); ok {
		if err := validResponse.VisitDeleteEnvironmentResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetEnvironment operation middleware
func (sh *strictHandler) GetEnvironment(ctx *fiber.Ctx, teamId TeamId, projectId ProjectId, environmentId EnvironmentId) error {
	var request GetEnvironmentRequestObject

	request.TeamId = teamId
	request.ProjectId = projectId
	request.EnvironmentId = environmentId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetEnvironment(ctx.UserContext(), request.(GetEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEnvironment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetEnvironmentResponseObject); ok {
		if err := validResponse.VisitGetEnvironmentResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateEnvironment operation middleware
func (sh *strictHandler) UpdateEnvironment(ctx *fiber.Ctx, teamId TeamId, projectId ProjectId, environmentId EnvironmentId) error {
	var request UpdateEnvironmentRequestObject

	request.TeamId = teamId
	request.ProjectId = projectId
	request.EnvironmentId = environmentId

	var body UpdateEnvironmentJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateEnvironment(ctx.UserContext(), request.(UpdateEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateEnvironment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateEnvironmentResponseObject); ok {
		if err := validResponse.VisitUpdateEnvironmentResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUsers operation middleware
func (sh *strictHandler) GetUsers(ctx *fiber.Ctx, params GetUsersParams) error {
	var request GetUsersRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsers(ctx.UserContext(), request.(GetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetUsersResponseObject); ok {
		if err := validResponse.VisitGetUsersResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostUser operation middleware
func (sh *strictHandler) PostUser(ctx *fiber.Ctx) error {
	var request PostUserRequestObject

	var body PostUserJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostUser(ctx.UserContext(), request.(PostUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostUserResponseObject); ok {
		if err := validResponse.VisitPostUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteUser operation middleware
func (sh *strictHandler) DeleteUser(ctx *fiber.Ctx, id string) error {
	var request DeleteUserRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUser(ctx.UserContext(), request.(DeleteUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteUserResponseObject); ok {
		if err := validResponse.VisitDeleteUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUser operation middleware
func (sh *strictHandler) GetUser(ctx *fiber.Ctx, id string) error {
	var request GetUserRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetUser(ctx.UserContext(), request.(GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetUserResponseObject); ok {
		if err := validResponse.VisitGetUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateUser operation middleware
func (sh *strictHandler) UpdateUser(ctx *fiber.Ctx, id string) error {
	var request UpdateUserRequestObject

	request.Id = id

	var body UpdateUserJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUser(ctx.UserContext(), request.(UpdateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateUserResponseObject); ok {
		if err := validResponse.VisitUpdateUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
