// Package apis provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package apis

import (
	"context"
	"fmt"
	"net/url"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get system health status
	// (GET /_health)
	GetHealth(c *fiber.Ctx) error
	// Get system readiness
	// (GET /_ready)
	GetReady(c *fiber.Ctx) error
	// Get a list of projects
	// (GET /api/v1/project)
	GetApiV1Project(c *fiber.Ctx, params GetApiV1ProjectParams) error
	// Create a new project
	// (POST /api/v1/project)
	PostApiV1Project(c *fiber.Ctx) error
	// Delete a project
	// (DELETE /api/v1/project/{id})
	DeleteApiV1ProjectId(c *fiber.Ctx, id string) error
	// Get a project
	// (GET /api/v1/project/{id})
	GetApiV1ProjectId(c *fiber.Ctx, id string) error
	// Update a project
	// (PUT /api/v1/project/{id})
	PutApiV1ProjectId(c *fiber.Ctx, id string) error
	// Get a list of environments
	// (GET /api/v1/project/{projectId}/environment)
	GetApiV1ProjectProjectIdEnvironment(c *fiber.Ctx, projectId string, params GetApiV1ProjectProjectIdEnvironmentParams) error
	// Create a new environment
	// (POST /api/v1/project/{projectId}/environment)
	PostApiV1ProjectProjectIdEnvironment(c *fiber.Ctx, projectId string) error
	// Delete an environment
	// (DELETE /api/v1/project/{projectId}/environment/{environmentId})
	DeleteApiV1ProjectProjectIdEnvironmentEnvironmentId(c *fiber.Ctx, projectId string, environmentId string) error
	// Get an environment
	// (GET /api/v1/project/{projectId}/environment/{environmentId})
	GetApiV1ProjectProjectIdEnvironmentEnvironmentId(c *fiber.Ctx, projectId string, environmentId string) error
	// Update an environment
	// (PUT /api/v1/project/{projectId}/environment/{environmentId})
	PutApiV1ProjectProjectIdEnvironmentEnvironmentId(c *fiber.Ctx, projectId string, environmentId string) error
	// Get a list of snapshots
	// (GET /api/v1/snapshot)
	GetApiV1Snapshot(c *fiber.Ctx, params GetApiV1SnapshotParams) error
	// Create a new snapshot
	// (POST /api/v1/snapshot)
	PostApiV1Snapshot(c *fiber.Ctx) error
	// Delete a snapshot
	// (DELETE /api/v1/snapshot/{id})
	DeleteApiV1SnapshotId(c *fiber.Ctx, id string) error
	// Get a snapshot
	// (GET /api/v1/snapshot/{id})
	GetApiV1SnapshotId(c *fiber.Ctx, id string) error
	// Update a snapshot
	// (PUT /api/v1/snapshot/{id})
	PutApiV1SnapshotId(c *fiber.Ctx, id string) error
	// Get a task
	// (GET /api/v1/task/{id})
	GetApiV1TaskId(c *fiber.Ctx, id string) error
	// Get a list of teams
	// (GET /api/v1/team)
	GetApiV1Team(c *fiber.Ctx, params GetApiV1TeamParams) error
	// Create a new team
	// (POST /api/v1/team)
	PostApiV1Team(c *fiber.Ctx) error
	// Delete a team
	// (DELETE /api/v1/team/{id})
	DeleteApiV1TeamId(c *fiber.Ctx, id string) error
	// Get a team
	// (GET /api/v1/team/{id})
	GetApiV1TeamId(c *fiber.Ctx, id string) error
	// Update a team
	// (PUT /api/v1/team/{id})
	PutApiV1TeamId(c *fiber.Ctx, id string) error
	// Get a list of users
	// (GET /api/v1/user)
	GetApiV1User(c *fiber.Ctx, params GetApiV1UserParams) error
	// Create a new user
	// (POST /api/v1/user)
	PostApiV1User(c *fiber.Ctx) error
	// Delete a user
	// (DELETE /api/v1/user/{id})
	DeleteApiV1UserId(c *fiber.Ctx, id string) error
	// Get a user
	// (GET /api/v1/user/{id})
	GetApiV1UserId(c *fiber.Ctx, id string) error
	// Update a user
	// (PUT /api/v1/user/{id})
	PutApiV1UserId(c *fiber.Ctx, id string) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *fiber.Ctx) error {

	return siw.Handler.GetHealth(c)
}

// GetReady operation middleware
func (siw *ServerInterfaceWrapper) GetReady(c *fiber.Ctx) error {

	return siw.Handler.GetReady(c)
}

// GetApiV1Project operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Project(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1ProjectParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetApiV1Project(c, params)
}

// PostApiV1Project operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Project(c *fiber.Ctx) error {

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.PostApiV1Project(c)
}

// DeleteApiV1ProjectId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1ProjectId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.DeleteApiV1ProjectId(c, id)
}

// GetApiV1ProjectId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1ProjectId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.GetApiV1ProjectId(c, id)
}

// PutApiV1ProjectId operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1ProjectId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.PutApiV1ProjectId(c, id)
}

// GetApiV1ProjectProjectIdEnvironment operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1ProjectProjectIdEnvironment(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1ProjectProjectIdEnvironmentParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetApiV1ProjectProjectIdEnvironment(c, projectId, params)
}

// PostApiV1ProjectProjectIdEnvironment operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1ProjectProjectIdEnvironment(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.PostApiV1ProjectProjectIdEnvironment(c, projectId)
}

// DeleteApiV1ProjectProjectIdEnvironmentEnvironmentId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1ProjectProjectIdEnvironmentEnvironmentId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "environmentId" -------------
	var environmentId string

	err = runtime.BindStyledParameterWithOptions("simple", "environmentId", c.Params("environmentId"), &environmentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter environmentId: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.DeleteApiV1ProjectProjectIdEnvironmentEnvironmentId(c, projectId, environmentId)
}

// GetApiV1ProjectProjectIdEnvironmentEnvironmentId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1ProjectProjectIdEnvironmentEnvironmentId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "environmentId" -------------
	var environmentId string

	err = runtime.BindStyledParameterWithOptions("simple", "environmentId", c.Params("environmentId"), &environmentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter environmentId: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.GetApiV1ProjectProjectIdEnvironmentEnvironmentId(c, projectId, environmentId)
}

// PutApiV1ProjectProjectIdEnvironmentEnvironmentId operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1ProjectProjectIdEnvironmentEnvironmentId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Params("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter projectId: %w", err).Error())
	}

	// ------------- Path parameter "environmentId" -------------
	var environmentId string

	err = runtime.BindStyledParameterWithOptions("simple", "environmentId", c.Params("environmentId"), &environmentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter environmentId: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.PutApiV1ProjectProjectIdEnvironmentEnvironmentId(c, projectId, environmentId)
}

// GetApiV1Snapshot operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Snapshot(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1SnapshotParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetApiV1Snapshot(c, params)
}

// PostApiV1Snapshot operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Snapshot(c *fiber.Ctx) error {

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.PostApiV1Snapshot(c)
}

// DeleteApiV1SnapshotId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1SnapshotId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.DeleteApiV1SnapshotId(c, id)
}

// GetApiV1SnapshotId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1SnapshotId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.GetApiV1SnapshotId(c, id)
}

// PutApiV1SnapshotId operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1SnapshotId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.PutApiV1SnapshotId(c, id)
}

// GetApiV1TaskId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1TaskId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.GetApiV1TaskId(c, id)
}

// GetApiV1Team operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Team(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1TeamParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetApiV1Team(c, params)
}

// PostApiV1Team operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Team(c *fiber.Ctx) error {

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.PostApiV1Team(c)
}

// DeleteApiV1TeamId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1TeamId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.DeleteApiV1TeamId(c, id)
}

// GetApiV1TeamId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1TeamId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.GetApiV1TeamId(c, id)
}

// PutApiV1TeamId operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1TeamId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.PutApiV1TeamId(c, id)
}

// GetApiV1User operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1User(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1UserParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	return siw.Handler.GetApiV1User(c, params)
}

// PostApiV1User operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1User(c *fiber.Ctx) error {

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.PostApiV1User(c)
}

// DeleteApiV1UserId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1UserId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.DeleteApiV1UserId(c, id)
}

// GetApiV1UserId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1UserId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.GetApiV1UserId(c, id)
}

// PutApiV1UserId operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1UserId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	c.Context().SetUserValue(Api_keyScopes, []string{})

	return siw.Handler.PutApiV1UserId(c, id)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/_health", wrapper.GetHealth)

	router.Get(options.BaseURL+"/_ready", wrapper.GetReady)

	router.Get(options.BaseURL+"/api/v1/project", wrapper.GetApiV1Project)

	router.Post(options.BaseURL+"/api/v1/project", wrapper.PostApiV1Project)

	router.Delete(options.BaseURL+"/api/v1/project/:id", wrapper.DeleteApiV1ProjectId)

	router.Get(options.BaseURL+"/api/v1/project/:id", wrapper.GetApiV1ProjectId)

	router.Put(options.BaseURL+"/api/v1/project/:id", wrapper.PutApiV1ProjectId)

	router.Get(options.BaseURL+"/api/v1/project/:projectId/environment", wrapper.GetApiV1ProjectProjectIdEnvironment)

	router.Post(options.BaseURL+"/api/v1/project/:projectId/environment", wrapper.PostApiV1ProjectProjectIdEnvironment)

	router.Delete(options.BaseURL+"/api/v1/project/:projectId/environment/:environmentId", wrapper.DeleteApiV1ProjectProjectIdEnvironmentEnvironmentId)

	router.Get(options.BaseURL+"/api/v1/project/:projectId/environment/:environmentId", wrapper.GetApiV1ProjectProjectIdEnvironmentEnvironmentId)

	router.Put(options.BaseURL+"/api/v1/project/:projectId/environment/:environmentId", wrapper.PutApiV1ProjectProjectIdEnvironmentEnvironmentId)

	router.Get(options.BaseURL+"/api/v1/snapshot", wrapper.GetApiV1Snapshot)

	router.Post(options.BaseURL+"/api/v1/snapshot", wrapper.PostApiV1Snapshot)

	router.Delete(options.BaseURL+"/api/v1/snapshot/:id", wrapper.DeleteApiV1SnapshotId)

	router.Get(options.BaseURL+"/api/v1/snapshot/:id", wrapper.GetApiV1SnapshotId)

	router.Put(options.BaseURL+"/api/v1/snapshot/:id", wrapper.PutApiV1SnapshotId)

	router.Get(options.BaseURL+"/api/v1/task/:id", wrapper.GetApiV1TaskId)

	router.Get(options.BaseURL+"/api/v1/team", wrapper.GetApiV1Team)

	router.Post(options.BaseURL+"/api/v1/team", wrapper.PostApiV1Team)

	router.Delete(options.BaseURL+"/api/v1/team/:id", wrapper.DeleteApiV1TeamId)

	router.Get(options.BaseURL+"/api/v1/team/:id", wrapper.GetApiV1TeamId)

	router.Put(options.BaseURL+"/api/v1/team/:id", wrapper.PutApiV1TeamId)

	router.Get(options.BaseURL+"/api/v1/user", wrapper.GetApiV1User)

	router.Post(options.BaseURL+"/api/v1/user", wrapper.PostApiV1User)

	router.Delete(options.BaseURL+"/api/v1/user/:id", wrapper.DeleteApiV1UserId)

	router.Get(options.BaseURL+"/api/v1/user/:id", wrapper.GetApiV1UserId)

	router.Put(options.BaseURL+"/api/v1/user/:id", wrapper.PutApiV1UserId)

}

type GetHealthRequestObject struct {
}

type GetHealthResponseObject interface {
	VisitGetHealthResponse(ctx *fiber.Ctx) error
}

type GetHealth200JSONResponse HealthResponse

func (response GetHealth200JSONResponse) VisitGetHealthResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetHealth500JSONResponse HealthResponse

func (response GetHealth500JSONResponse) VisitGetHealthResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetReadyRequestObject struct {
}

type GetReadyResponseObject interface {
	VisitGetReadyResponse(ctx *fiber.Ctx) error
}

type GetReady200JSONResponse HealthResponse

func (response GetReady200JSONResponse) VisitGetReadyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetReady500JSONResponse HealthResponse

func (response GetReady500JSONResponse) VisitGetReadyResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetApiV1ProjectRequestObject struct {
	Params GetApiV1ProjectParams
}

type GetApiV1ProjectResponseObject interface {
	VisitGetApiV1ProjectResponse(ctx *fiber.Ctx) error
}

type GetApiV1Project200JSONResponse struct {
	Metadata *struct {
		Limit      *int `json:"limit,omitempty"`
		Offset     *int `json:"offset,omitempty"`
		TotalCount *int `json:"totalCount,omitempty"`
	} `json:"metadata,omitempty"`
	Projects *[]Project `json:"projects,omitempty"`
}

func (response GetApiV1Project200JSONResponse) VisitGetApiV1ProjectResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetApiV1Project500JSONResponse ErrorResponse

func (response GetApiV1Project500JSONResponse) VisitGetApiV1ProjectResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostApiV1ProjectRequestObject struct {
	Body *PostApiV1ProjectJSONRequestBody
}

type PostApiV1ProjectResponseObject interface {
	VisitPostApiV1ProjectResponse(ctx *fiber.Ctx) error
}

type PostApiV1Project201JSONResponse Project

func (response PostApiV1Project201JSONResponse) VisitPostApiV1ProjectResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type PostApiV1Project500JSONResponse ErrorResponse

func (response PostApiV1Project500JSONResponse) VisitPostApiV1ProjectResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeleteApiV1ProjectIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteApiV1ProjectIdResponseObject interface {
	VisitDeleteApiV1ProjectIdResponse(ctx *fiber.Ctx) error
}

type DeleteApiV1ProjectId204Response struct {
}

func (response DeleteApiV1ProjectId204Response) VisitDeleteApiV1ProjectIdResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type DeleteApiV1ProjectId404JSONResponse ErrorResponse

func (response DeleteApiV1ProjectId404JSONResponse) VisitDeleteApiV1ProjectIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type DeleteApiV1ProjectId500JSONResponse ErrorResponse

func (response DeleteApiV1ProjectId500JSONResponse) VisitDeleteApiV1ProjectIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetApiV1ProjectIdRequestObject struct {
	Id string `json:"id"`
}

type GetApiV1ProjectIdResponseObject interface {
	VisitGetApiV1ProjectIdResponse(ctx *fiber.Ctx) error
}

type GetApiV1ProjectId200JSONResponse Project

func (response GetApiV1ProjectId200JSONResponse) VisitGetApiV1ProjectIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetApiV1ProjectId404JSONResponse ErrorResponse

func (response GetApiV1ProjectId404JSONResponse) VisitGetApiV1ProjectIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetApiV1ProjectId500JSONResponse ErrorResponse

func (response GetApiV1ProjectId500JSONResponse) VisitGetApiV1ProjectIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PutApiV1ProjectIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutApiV1ProjectIdJSONRequestBody
}

type PutApiV1ProjectIdResponseObject interface {
	VisitPutApiV1ProjectIdResponse(ctx *fiber.Ctx) error
}

type PutApiV1ProjectId200JSONResponse Project

func (response PutApiV1ProjectId200JSONResponse) VisitPutApiV1ProjectIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PutApiV1ProjectId404JSONResponse ErrorResponse

func (response PutApiV1ProjectId404JSONResponse) VisitPutApiV1ProjectIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PutApiV1ProjectId500JSONResponse ErrorResponse

func (response PutApiV1ProjectId500JSONResponse) VisitPutApiV1ProjectIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetApiV1ProjectProjectIdEnvironmentRequestObject struct {
	ProjectId string `json:"projectId"`
	Params    GetApiV1ProjectProjectIdEnvironmentParams
}

type GetApiV1ProjectProjectIdEnvironmentResponseObject interface {
	VisitGetApiV1ProjectProjectIdEnvironmentResponse(ctx *fiber.Ctx) error
}

type GetApiV1ProjectProjectIdEnvironment200JSONResponse struct {
	Environments *[]Environment `json:"environments,omitempty"`
	Metadata     *struct {
		Limit      *int `json:"limit,omitempty"`
		Offset     *int `json:"offset,omitempty"`
		TotalCount *int `json:"totalCount,omitempty"`
	} `json:"metadata,omitempty"`
}

func (response GetApiV1ProjectProjectIdEnvironment200JSONResponse) VisitGetApiV1ProjectProjectIdEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetApiV1ProjectProjectIdEnvironment500JSONResponse ErrorResponse

func (response GetApiV1ProjectProjectIdEnvironment500JSONResponse) VisitGetApiV1ProjectProjectIdEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostApiV1ProjectProjectIdEnvironmentRequestObject struct {
	ProjectId string `json:"projectId"`
	Body      *PostApiV1ProjectProjectIdEnvironmentJSONRequestBody
}

type PostApiV1ProjectProjectIdEnvironmentResponseObject interface {
	VisitPostApiV1ProjectProjectIdEnvironmentResponse(ctx *fiber.Ctx) error
}

type PostApiV1ProjectProjectIdEnvironment201JSONResponse Environment

func (response PostApiV1ProjectProjectIdEnvironment201JSONResponse) VisitPostApiV1ProjectProjectIdEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type PostApiV1ProjectProjectIdEnvironment500JSONResponse ErrorResponse

func (response PostApiV1ProjectProjectIdEnvironment500JSONResponse) VisitPostApiV1ProjectProjectIdEnvironmentResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeleteApiV1ProjectProjectIdEnvironmentEnvironmentIdRequestObject struct {
	ProjectId     string `json:"projectId"`
	EnvironmentId string `json:"environmentId"`
}

type DeleteApiV1ProjectProjectIdEnvironmentEnvironmentIdResponseObject interface {
	VisitDeleteApiV1ProjectProjectIdEnvironmentEnvironmentIdResponse(ctx *fiber.Ctx) error
}

type DeleteApiV1ProjectProjectIdEnvironmentEnvironmentId204Response struct {
}

func (response DeleteApiV1ProjectProjectIdEnvironmentEnvironmentId204Response) VisitDeleteApiV1ProjectProjectIdEnvironmentEnvironmentIdResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type DeleteApiV1ProjectProjectIdEnvironmentEnvironmentId404JSONResponse ErrorResponse

func (response DeleteApiV1ProjectProjectIdEnvironmentEnvironmentId404JSONResponse) VisitDeleteApiV1ProjectProjectIdEnvironmentEnvironmentIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type DeleteApiV1ProjectProjectIdEnvironmentEnvironmentId500JSONResponse ErrorResponse

func (response DeleteApiV1ProjectProjectIdEnvironmentEnvironmentId500JSONResponse) VisitDeleteApiV1ProjectProjectIdEnvironmentEnvironmentIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetApiV1ProjectProjectIdEnvironmentEnvironmentIdRequestObject struct {
	ProjectId     string `json:"projectId"`
	EnvironmentId string `json:"environmentId"`
}

type GetApiV1ProjectProjectIdEnvironmentEnvironmentIdResponseObject interface {
	VisitGetApiV1ProjectProjectIdEnvironmentEnvironmentIdResponse(ctx *fiber.Ctx) error
}

type GetApiV1ProjectProjectIdEnvironmentEnvironmentId200JSONResponse Environment

func (response GetApiV1ProjectProjectIdEnvironmentEnvironmentId200JSONResponse) VisitGetApiV1ProjectProjectIdEnvironmentEnvironmentIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetApiV1ProjectProjectIdEnvironmentEnvironmentId404JSONResponse ErrorResponse

func (response GetApiV1ProjectProjectIdEnvironmentEnvironmentId404JSONResponse) VisitGetApiV1ProjectProjectIdEnvironmentEnvironmentIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetApiV1ProjectProjectIdEnvironmentEnvironmentId500JSONResponse ErrorResponse

func (response GetApiV1ProjectProjectIdEnvironmentEnvironmentId500JSONResponse) VisitGetApiV1ProjectProjectIdEnvironmentEnvironmentIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PutApiV1ProjectProjectIdEnvironmentEnvironmentIdRequestObject struct {
	ProjectId     string `json:"projectId"`
	EnvironmentId string `json:"environmentId"`
	Body          *PutApiV1ProjectProjectIdEnvironmentEnvironmentIdJSONRequestBody
}

type PutApiV1ProjectProjectIdEnvironmentEnvironmentIdResponseObject interface {
	VisitPutApiV1ProjectProjectIdEnvironmentEnvironmentIdResponse(ctx *fiber.Ctx) error
}

type PutApiV1ProjectProjectIdEnvironmentEnvironmentId200JSONResponse Environment

func (response PutApiV1ProjectProjectIdEnvironmentEnvironmentId200JSONResponse) VisitPutApiV1ProjectProjectIdEnvironmentEnvironmentIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PutApiV1ProjectProjectIdEnvironmentEnvironmentId404JSONResponse ErrorResponse

func (response PutApiV1ProjectProjectIdEnvironmentEnvironmentId404JSONResponse) VisitPutApiV1ProjectProjectIdEnvironmentEnvironmentIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PutApiV1ProjectProjectIdEnvironmentEnvironmentId500JSONResponse ErrorResponse

func (response PutApiV1ProjectProjectIdEnvironmentEnvironmentId500JSONResponse) VisitPutApiV1ProjectProjectIdEnvironmentEnvironmentIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetApiV1SnapshotRequestObject struct {
	Params GetApiV1SnapshotParams
}

type GetApiV1SnapshotResponseObject interface {
	VisitGetApiV1SnapshotResponse(ctx *fiber.Ctx) error
}

type GetApiV1Snapshot200JSONResponse struct {
	Metadata *struct {
		Limit      *int `json:"limit,omitempty"`
		Offset     *int `json:"offset,omitempty"`
		TotalCount *int `json:"totalCount,omitempty"`
	} `json:"metadata,omitempty"`
	Snapshots *[]Snapshot `json:"snapshots,omitempty"`
}

func (response GetApiV1Snapshot200JSONResponse) VisitGetApiV1SnapshotResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetApiV1Snapshot500JSONResponse ErrorResponse

func (response GetApiV1Snapshot500JSONResponse) VisitGetApiV1SnapshotResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostApiV1SnapshotRequestObject struct {
	Body *PostApiV1SnapshotJSONRequestBody
}

type PostApiV1SnapshotResponseObject interface {
	VisitPostApiV1SnapshotResponse(ctx *fiber.Ctx) error
}

type PostApiV1Snapshot201JSONResponse Snapshot

func (response PostApiV1Snapshot201JSONResponse) VisitPostApiV1SnapshotResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type PostApiV1Snapshot500JSONResponse ErrorResponse

func (response PostApiV1Snapshot500JSONResponse) VisitPostApiV1SnapshotResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeleteApiV1SnapshotIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteApiV1SnapshotIdResponseObject interface {
	VisitDeleteApiV1SnapshotIdResponse(ctx *fiber.Ctx) error
}

type DeleteApiV1SnapshotId204Response struct {
}

func (response DeleteApiV1SnapshotId204Response) VisitDeleteApiV1SnapshotIdResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type DeleteApiV1SnapshotId404JSONResponse ErrorResponse

func (response DeleteApiV1SnapshotId404JSONResponse) VisitDeleteApiV1SnapshotIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type DeleteApiV1SnapshotId500JSONResponse ErrorResponse

func (response DeleteApiV1SnapshotId500JSONResponse) VisitDeleteApiV1SnapshotIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetApiV1SnapshotIdRequestObject struct {
	Id string `json:"id"`
}

type GetApiV1SnapshotIdResponseObject interface {
	VisitGetApiV1SnapshotIdResponse(ctx *fiber.Ctx) error
}

type GetApiV1SnapshotId200JSONResponse Snapshot

func (response GetApiV1SnapshotId200JSONResponse) VisitGetApiV1SnapshotIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetApiV1SnapshotId404JSONResponse ErrorResponse

func (response GetApiV1SnapshotId404JSONResponse) VisitGetApiV1SnapshotIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetApiV1SnapshotId500JSONResponse ErrorResponse

func (response GetApiV1SnapshotId500JSONResponse) VisitGetApiV1SnapshotIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PutApiV1SnapshotIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutApiV1SnapshotIdJSONRequestBody
}

type PutApiV1SnapshotIdResponseObject interface {
	VisitPutApiV1SnapshotIdResponse(ctx *fiber.Ctx) error
}

type PutApiV1SnapshotId200JSONResponse Snapshot

func (response PutApiV1SnapshotId200JSONResponse) VisitPutApiV1SnapshotIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PutApiV1SnapshotId404JSONResponse ErrorResponse

func (response PutApiV1SnapshotId404JSONResponse) VisitPutApiV1SnapshotIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PutApiV1SnapshotId500JSONResponse ErrorResponse

func (response PutApiV1SnapshotId500JSONResponse) VisitPutApiV1SnapshotIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetApiV1TaskIdRequestObject struct {
	Id string `json:"id"`
}

type GetApiV1TaskIdResponseObject interface {
	VisitGetApiV1TaskIdResponse(ctx *fiber.Ctx) error
}

type GetApiV1TaskId200JSONResponse Task

func (response GetApiV1TaskId200JSONResponse) VisitGetApiV1TaskIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetApiV1TaskId404JSONResponse ErrorResponse

func (response GetApiV1TaskId404JSONResponse) VisitGetApiV1TaskIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetApiV1TaskId500JSONResponse ErrorResponse

func (response GetApiV1TaskId500JSONResponse) VisitGetApiV1TaskIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetApiV1TeamRequestObject struct {
	Params GetApiV1TeamParams
}

type GetApiV1TeamResponseObject interface {
	VisitGetApiV1TeamResponse(ctx *fiber.Ctx) error
}

type GetApiV1Team200JSONResponse struct {
	Metadata *struct {
		Limit      *int `json:"limit,omitempty"`
		Offset     *int `json:"offset,omitempty"`
		TotalCount *int `json:"totalCount,omitempty"`
	} `json:"metadata,omitempty"`
	Teams *[]Team `json:"teams,omitempty"`
}

func (response GetApiV1Team200JSONResponse) VisitGetApiV1TeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetApiV1Team500JSONResponse ErrorResponse

func (response GetApiV1Team500JSONResponse) VisitGetApiV1TeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostApiV1TeamRequestObject struct {
	Body *PostApiV1TeamJSONRequestBody
}

type PostApiV1TeamResponseObject interface {
	VisitPostApiV1TeamResponse(ctx *fiber.Ctx) error
}

type PostApiV1Team201JSONResponse Team

func (response PostApiV1Team201JSONResponse) VisitPostApiV1TeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type PostApiV1Team500JSONResponse ErrorResponse

func (response PostApiV1Team500JSONResponse) VisitPostApiV1TeamResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeleteApiV1TeamIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteApiV1TeamIdResponseObject interface {
	VisitDeleteApiV1TeamIdResponse(ctx *fiber.Ctx) error
}

type DeleteApiV1TeamId204Response struct {
}

func (response DeleteApiV1TeamId204Response) VisitDeleteApiV1TeamIdResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type DeleteApiV1TeamId404JSONResponse ErrorResponse

func (response DeleteApiV1TeamId404JSONResponse) VisitDeleteApiV1TeamIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type DeleteApiV1TeamId500JSONResponse ErrorResponse

func (response DeleteApiV1TeamId500JSONResponse) VisitDeleteApiV1TeamIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetApiV1TeamIdRequestObject struct {
	Id string `json:"id"`
}

type GetApiV1TeamIdResponseObject interface {
	VisitGetApiV1TeamIdResponse(ctx *fiber.Ctx) error
}

type GetApiV1TeamId200JSONResponse Team

func (response GetApiV1TeamId200JSONResponse) VisitGetApiV1TeamIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetApiV1TeamId404JSONResponse ErrorResponse

func (response GetApiV1TeamId404JSONResponse) VisitGetApiV1TeamIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetApiV1TeamId500JSONResponse ErrorResponse

func (response GetApiV1TeamId500JSONResponse) VisitGetApiV1TeamIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PutApiV1TeamIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutApiV1TeamIdJSONRequestBody
}

type PutApiV1TeamIdResponseObject interface {
	VisitPutApiV1TeamIdResponse(ctx *fiber.Ctx) error
}

type PutApiV1TeamId200JSONResponse Team

func (response PutApiV1TeamId200JSONResponse) VisitPutApiV1TeamIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PutApiV1TeamId404JSONResponse ErrorResponse

func (response PutApiV1TeamId404JSONResponse) VisitPutApiV1TeamIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PutApiV1TeamId500JSONResponse ErrorResponse

func (response PutApiV1TeamId500JSONResponse) VisitPutApiV1TeamIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetApiV1UserRequestObject struct {
	Params GetApiV1UserParams
}

type GetApiV1UserResponseObject interface {
	VisitGetApiV1UserResponse(ctx *fiber.Ctx) error
}

type GetApiV1User200JSONResponse struct {
	Metadata *struct {
		Limit      *int `json:"limit,omitempty"`
		Offset     *int `json:"offset,omitempty"`
		TotalCount *int `json:"totalCount,omitempty"`
	} `json:"metadata,omitempty"`
	Users *[]User `json:"users,omitempty"`
}

func (response GetApiV1User200JSONResponse) VisitGetApiV1UserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetApiV1User500JSONResponse ErrorResponse

func (response GetApiV1User500JSONResponse) VisitGetApiV1UserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostApiV1UserRequestObject struct {
	Body *PostApiV1UserJSONRequestBody
}

type PostApiV1UserResponseObject interface {
	VisitPostApiV1UserResponse(ctx *fiber.Ctx) error
}

type PostApiV1User201JSONResponse User

func (response PostApiV1User201JSONResponse) VisitPostApiV1UserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type PostApiV1User500JSONResponse ErrorResponse

func (response PostApiV1User500JSONResponse) VisitPostApiV1UserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeleteApiV1UserIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteApiV1UserIdResponseObject interface {
	VisitDeleteApiV1UserIdResponse(ctx *fiber.Ctx) error
}

type DeleteApiV1UserId204Response struct {
}

func (response DeleteApiV1UserId204Response) VisitDeleteApiV1UserIdResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type DeleteApiV1UserId404JSONResponse ErrorResponse

func (response DeleteApiV1UserId404JSONResponse) VisitDeleteApiV1UserIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type DeleteApiV1UserId500JSONResponse ErrorResponse

func (response DeleteApiV1UserId500JSONResponse) VisitDeleteApiV1UserIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetApiV1UserIdRequestObject struct {
	Id string `json:"id"`
}

type GetApiV1UserIdResponseObject interface {
	VisitGetApiV1UserIdResponse(ctx *fiber.Ctx) error
}

type GetApiV1UserId200JSONResponse User

func (response GetApiV1UserId200JSONResponse) VisitGetApiV1UserIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetApiV1UserId404JSONResponse ErrorResponse

func (response GetApiV1UserId404JSONResponse) VisitGetApiV1UserIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetApiV1UserId500JSONResponse ErrorResponse

func (response GetApiV1UserId500JSONResponse) VisitGetApiV1UserIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PutApiV1UserIdRequestObject struct {
	Id   string `json:"id"`
	Body *PutApiV1UserIdJSONRequestBody
}

type PutApiV1UserIdResponseObject interface {
	VisitPutApiV1UserIdResponse(ctx *fiber.Ctx) error
}

type PutApiV1UserId200JSONResponse User

func (response PutApiV1UserId200JSONResponse) VisitPutApiV1UserIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PutApiV1UserId404JSONResponse ErrorResponse

func (response PutApiV1UserId404JSONResponse) VisitPutApiV1UserIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PutApiV1UserId500JSONResponse ErrorResponse

func (response PutApiV1UserId500JSONResponse) VisitPutApiV1UserIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get system health status
	// (GET /_health)
	GetHealth(ctx context.Context, request GetHealthRequestObject) (GetHealthResponseObject, error)
	// Get system readiness
	// (GET /_ready)
	GetReady(ctx context.Context, request GetReadyRequestObject) (GetReadyResponseObject, error)
	// Get a list of projects
	// (GET /api/v1/project)
	GetApiV1Project(ctx context.Context, request GetApiV1ProjectRequestObject) (GetApiV1ProjectResponseObject, error)
	// Create a new project
	// (POST /api/v1/project)
	PostApiV1Project(ctx context.Context, request PostApiV1ProjectRequestObject) (PostApiV1ProjectResponseObject, error)
	// Delete a project
	// (DELETE /api/v1/project/{id})
	DeleteApiV1ProjectId(ctx context.Context, request DeleteApiV1ProjectIdRequestObject) (DeleteApiV1ProjectIdResponseObject, error)
	// Get a project
	// (GET /api/v1/project/{id})
	GetApiV1ProjectId(ctx context.Context, request GetApiV1ProjectIdRequestObject) (GetApiV1ProjectIdResponseObject, error)
	// Update a project
	// (PUT /api/v1/project/{id})
	PutApiV1ProjectId(ctx context.Context, request PutApiV1ProjectIdRequestObject) (PutApiV1ProjectIdResponseObject, error)
	// Get a list of environments
	// (GET /api/v1/project/{projectId}/environment)
	GetApiV1ProjectProjectIdEnvironment(ctx context.Context, request GetApiV1ProjectProjectIdEnvironmentRequestObject) (GetApiV1ProjectProjectIdEnvironmentResponseObject, error)
	// Create a new environment
	// (POST /api/v1/project/{projectId}/environment)
	PostApiV1ProjectProjectIdEnvironment(ctx context.Context, request PostApiV1ProjectProjectIdEnvironmentRequestObject) (PostApiV1ProjectProjectIdEnvironmentResponseObject, error)
	// Delete an environment
	// (DELETE /api/v1/project/{projectId}/environment/{environmentId})
	DeleteApiV1ProjectProjectIdEnvironmentEnvironmentId(ctx context.Context, request DeleteApiV1ProjectProjectIdEnvironmentEnvironmentIdRequestObject) (DeleteApiV1ProjectProjectIdEnvironmentEnvironmentIdResponseObject, error)
	// Get an environment
	// (GET /api/v1/project/{projectId}/environment/{environmentId})
	GetApiV1ProjectProjectIdEnvironmentEnvironmentId(ctx context.Context, request GetApiV1ProjectProjectIdEnvironmentEnvironmentIdRequestObject) (GetApiV1ProjectProjectIdEnvironmentEnvironmentIdResponseObject, error)
	// Update an environment
	// (PUT /api/v1/project/{projectId}/environment/{environmentId})
	PutApiV1ProjectProjectIdEnvironmentEnvironmentId(ctx context.Context, request PutApiV1ProjectProjectIdEnvironmentEnvironmentIdRequestObject) (PutApiV1ProjectProjectIdEnvironmentEnvironmentIdResponseObject, error)
	// Get a list of snapshots
	// (GET /api/v1/snapshot)
	GetApiV1Snapshot(ctx context.Context, request GetApiV1SnapshotRequestObject) (GetApiV1SnapshotResponseObject, error)
	// Create a new snapshot
	// (POST /api/v1/snapshot)
	PostApiV1Snapshot(ctx context.Context, request PostApiV1SnapshotRequestObject) (PostApiV1SnapshotResponseObject, error)
	// Delete a snapshot
	// (DELETE /api/v1/snapshot/{id})
	DeleteApiV1SnapshotId(ctx context.Context, request DeleteApiV1SnapshotIdRequestObject) (DeleteApiV1SnapshotIdResponseObject, error)
	// Get a snapshot
	// (GET /api/v1/snapshot/{id})
	GetApiV1SnapshotId(ctx context.Context, request GetApiV1SnapshotIdRequestObject) (GetApiV1SnapshotIdResponseObject, error)
	// Update a snapshot
	// (PUT /api/v1/snapshot/{id})
	PutApiV1SnapshotId(ctx context.Context, request PutApiV1SnapshotIdRequestObject) (PutApiV1SnapshotIdResponseObject, error)
	// Get a task
	// (GET /api/v1/task/{id})
	GetApiV1TaskId(ctx context.Context, request GetApiV1TaskIdRequestObject) (GetApiV1TaskIdResponseObject, error)
	// Get a list of teams
	// (GET /api/v1/team)
	GetApiV1Team(ctx context.Context, request GetApiV1TeamRequestObject) (GetApiV1TeamResponseObject, error)
	// Create a new team
	// (POST /api/v1/team)
	PostApiV1Team(ctx context.Context, request PostApiV1TeamRequestObject) (PostApiV1TeamResponseObject, error)
	// Delete a team
	// (DELETE /api/v1/team/{id})
	DeleteApiV1TeamId(ctx context.Context, request DeleteApiV1TeamIdRequestObject) (DeleteApiV1TeamIdResponseObject, error)
	// Get a team
	// (GET /api/v1/team/{id})
	GetApiV1TeamId(ctx context.Context, request GetApiV1TeamIdRequestObject) (GetApiV1TeamIdResponseObject, error)
	// Update a team
	// (PUT /api/v1/team/{id})
	PutApiV1TeamId(ctx context.Context, request PutApiV1TeamIdRequestObject) (PutApiV1TeamIdResponseObject, error)
	// Get a list of users
	// (GET /api/v1/user)
	GetApiV1User(ctx context.Context, request GetApiV1UserRequestObject) (GetApiV1UserResponseObject, error)
	// Create a new user
	// (POST /api/v1/user)
	PostApiV1User(ctx context.Context, request PostApiV1UserRequestObject) (PostApiV1UserResponseObject, error)
	// Delete a user
	// (DELETE /api/v1/user/{id})
	DeleteApiV1UserId(ctx context.Context, request DeleteApiV1UserIdRequestObject) (DeleteApiV1UserIdResponseObject, error)
	// Get a user
	// (GET /api/v1/user/{id})
	GetApiV1UserId(ctx context.Context, request GetApiV1UserIdRequestObject) (GetApiV1UserIdResponseObject, error)
	// Update a user
	// (PUT /api/v1/user/{id})
	PutApiV1UserId(ctx context.Context, request PutApiV1UserIdRequestObject) (PutApiV1UserIdResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetHealth operation middleware
func (sh *strictHandler) GetHealth(ctx *fiber.Ctx) error {
	var request GetHealthRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealth(ctx.UserContext(), request.(GetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetHealthResponseObject); ok {
		if err := validResponse.VisitGetHealthResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetReady operation middleware
func (sh *strictHandler) GetReady(ctx *fiber.Ctx) error {
	var request GetReadyRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetReady(ctx.UserContext(), request.(GetReadyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetReady")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetReadyResponseObject); ok {
		if err := validResponse.VisitGetReadyResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiV1Project operation middleware
func (sh *strictHandler) GetApiV1Project(ctx *fiber.Ctx, params GetApiV1ProjectParams) error {
	var request GetApiV1ProjectRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiV1Project(ctx.UserContext(), request.(GetApiV1ProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiV1Project")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetApiV1ProjectResponseObject); ok {
		if err := validResponse.VisitGetApiV1ProjectResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiV1Project operation middleware
func (sh *strictHandler) PostApiV1Project(ctx *fiber.Ctx) error {
	var request PostApiV1ProjectRequestObject

	var body PostApiV1ProjectJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiV1Project(ctx.UserContext(), request.(PostApiV1ProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiV1Project")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostApiV1ProjectResponseObject); ok {
		if err := validResponse.VisitPostApiV1ProjectResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteApiV1ProjectId operation middleware
func (sh *strictHandler) DeleteApiV1ProjectId(ctx *fiber.Ctx, id string) error {
	var request DeleteApiV1ProjectIdRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiV1ProjectId(ctx.UserContext(), request.(DeleteApiV1ProjectIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiV1ProjectId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteApiV1ProjectIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiV1ProjectIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiV1ProjectId operation middleware
func (sh *strictHandler) GetApiV1ProjectId(ctx *fiber.Ctx, id string) error {
	var request GetApiV1ProjectIdRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiV1ProjectId(ctx.UserContext(), request.(GetApiV1ProjectIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiV1ProjectId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetApiV1ProjectIdResponseObject); ok {
		if err := validResponse.VisitGetApiV1ProjectIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutApiV1ProjectId operation middleware
func (sh *strictHandler) PutApiV1ProjectId(ctx *fiber.Ctx, id string) error {
	var request PutApiV1ProjectIdRequestObject

	request.Id = id

	var body PutApiV1ProjectIdJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiV1ProjectId(ctx.UserContext(), request.(PutApiV1ProjectIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiV1ProjectId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PutApiV1ProjectIdResponseObject); ok {
		if err := validResponse.VisitPutApiV1ProjectIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiV1ProjectProjectIdEnvironment operation middleware
func (sh *strictHandler) GetApiV1ProjectProjectIdEnvironment(ctx *fiber.Ctx, projectId string, params GetApiV1ProjectProjectIdEnvironmentParams) error {
	var request GetApiV1ProjectProjectIdEnvironmentRequestObject

	request.ProjectId = projectId
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiV1ProjectProjectIdEnvironment(ctx.UserContext(), request.(GetApiV1ProjectProjectIdEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiV1ProjectProjectIdEnvironment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetApiV1ProjectProjectIdEnvironmentResponseObject); ok {
		if err := validResponse.VisitGetApiV1ProjectProjectIdEnvironmentResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiV1ProjectProjectIdEnvironment operation middleware
func (sh *strictHandler) PostApiV1ProjectProjectIdEnvironment(ctx *fiber.Ctx, projectId string) error {
	var request PostApiV1ProjectProjectIdEnvironmentRequestObject

	request.ProjectId = projectId

	var body PostApiV1ProjectProjectIdEnvironmentJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiV1ProjectProjectIdEnvironment(ctx.UserContext(), request.(PostApiV1ProjectProjectIdEnvironmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiV1ProjectProjectIdEnvironment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostApiV1ProjectProjectIdEnvironmentResponseObject); ok {
		if err := validResponse.VisitPostApiV1ProjectProjectIdEnvironmentResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteApiV1ProjectProjectIdEnvironmentEnvironmentId operation middleware
func (sh *strictHandler) DeleteApiV1ProjectProjectIdEnvironmentEnvironmentId(ctx *fiber.Ctx, projectId string, environmentId string) error {
	var request DeleteApiV1ProjectProjectIdEnvironmentEnvironmentIdRequestObject

	request.ProjectId = projectId
	request.EnvironmentId = environmentId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiV1ProjectProjectIdEnvironmentEnvironmentId(ctx.UserContext(), request.(DeleteApiV1ProjectProjectIdEnvironmentEnvironmentIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiV1ProjectProjectIdEnvironmentEnvironmentId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteApiV1ProjectProjectIdEnvironmentEnvironmentIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiV1ProjectProjectIdEnvironmentEnvironmentIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiV1ProjectProjectIdEnvironmentEnvironmentId operation middleware
func (sh *strictHandler) GetApiV1ProjectProjectIdEnvironmentEnvironmentId(ctx *fiber.Ctx, projectId string, environmentId string) error {
	var request GetApiV1ProjectProjectIdEnvironmentEnvironmentIdRequestObject

	request.ProjectId = projectId
	request.EnvironmentId = environmentId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiV1ProjectProjectIdEnvironmentEnvironmentId(ctx.UserContext(), request.(GetApiV1ProjectProjectIdEnvironmentEnvironmentIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiV1ProjectProjectIdEnvironmentEnvironmentId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetApiV1ProjectProjectIdEnvironmentEnvironmentIdResponseObject); ok {
		if err := validResponse.VisitGetApiV1ProjectProjectIdEnvironmentEnvironmentIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutApiV1ProjectProjectIdEnvironmentEnvironmentId operation middleware
func (sh *strictHandler) PutApiV1ProjectProjectIdEnvironmentEnvironmentId(ctx *fiber.Ctx, projectId string, environmentId string) error {
	var request PutApiV1ProjectProjectIdEnvironmentEnvironmentIdRequestObject

	request.ProjectId = projectId
	request.EnvironmentId = environmentId

	var body PutApiV1ProjectProjectIdEnvironmentEnvironmentIdJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiV1ProjectProjectIdEnvironmentEnvironmentId(ctx.UserContext(), request.(PutApiV1ProjectProjectIdEnvironmentEnvironmentIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiV1ProjectProjectIdEnvironmentEnvironmentId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PutApiV1ProjectProjectIdEnvironmentEnvironmentIdResponseObject); ok {
		if err := validResponse.VisitPutApiV1ProjectProjectIdEnvironmentEnvironmentIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiV1Snapshot operation middleware
func (sh *strictHandler) GetApiV1Snapshot(ctx *fiber.Ctx, params GetApiV1SnapshotParams) error {
	var request GetApiV1SnapshotRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiV1Snapshot(ctx.UserContext(), request.(GetApiV1SnapshotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiV1Snapshot")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetApiV1SnapshotResponseObject); ok {
		if err := validResponse.VisitGetApiV1SnapshotResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiV1Snapshot operation middleware
func (sh *strictHandler) PostApiV1Snapshot(ctx *fiber.Ctx) error {
	var request PostApiV1SnapshotRequestObject

	var body PostApiV1SnapshotJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiV1Snapshot(ctx.UserContext(), request.(PostApiV1SnapshotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiV1Snapshot")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostApiV1SnapshotResponseObject); ok {
		if err := validResponse.VisitPostApiV1SnapshotResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteApiV1SnapshotId operation middleware
func (sh *strictHandler) DeleteApiV1SnapshotId(ctx *fiber.Ctx, id string) error {
	var request DeleteApiV1SnapshotIdRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiV1SnapshotId(ctx.UserContext(), request.(DeleteApiV1SnapshotIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiV1SnapshotId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteApiV1SnapshotIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiV1SnapshotIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiV1SnapshotId operation middleware
func (sh *strictHandler) GetApiV1SnapshotId(ctx *fiber.Ctx, id string) error {
	var request GetApiV1SnapshotIdRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiV1SnapshotId(ctx.UserContext(), request.(GetApiV1SnapshotIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiV1SnapshotId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetApiV1SnapshotIdResponseObject); ok {
		if err := validResponse.VisitGetApiV1SnapshotIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutApiV1SnapshotId operation middleware
func (sh *strictHandler) PutApiV1SnapshotId(ctx *fiber.Ctx, id string) error {
	var request PutApiV1SnapshotIdRequestObject

	request.Id = id

	var body PutApiV1SnapshotIdJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiV1SnapshotId(ctx.UserContext(), request.(PutApiV1SnapshotIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiV1SnapshotId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PutApiV1SnapshotIdResponseObject); ok {
		if err := validResponse.VisitPutApiV1SnapshotIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiV1TaskId operation middleware
func (sh *strictHandler) GetApiV1TaskId(ctx *fiber.Ctx, id string) error {
	var request GetApiV1TaskIdRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiV1TaskId(ctx.UserContext(), request.(GetApiV1TaskIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiV1TaskId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetApiV1TaskIdResponseObject); ok {
		if err := validResponse.VisitGetApiV1TaskIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiV1Team operation middleware
func (sh *strictHandler) GetApiV1Team(ctx *fiber.Ctx, params GetApiV1TeamParams) error {
	var request GetApiV1TeamRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiV1Team(ctx.UserContext(), request.(GetApiV1TeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiV1Team")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetApiV1TeamResponseObject); ok {
		if err := validResponse.VisitGetApiV1TeamResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiV1Team operation middleware
func (sh *strictHandler) PostApiV1Team(ctx *fiber.Ctx) error {
	var request PostApiV1TeamRequestObject

	var body PostApiV1TeamJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiV1Team(ctx.UserContext(), request.(PostApiV1TeamRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiV1Team")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostApiV1TeamResponseObject); ok {
		if err := validResponse.VisitPostApiV1TeamResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteApiV1TeamId operation middleware
func (sh *strictHandler) DeleteApiV1TeamId(ctx *fiber.Ctx, id string) error {
	var request DeleteApiV1TeamIdRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiV1TeamId(ctx.UserContext(), request.(DeleteApiV1TeamIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiV1TeamId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteApiV1TeamIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiV1TeamIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiV1TeamId operation middleware
func (sh *strictHandler) GetApiV1TeamId(ctx *fiber.Ctx, id string) error {
	var request GetApiV1TeamIdRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiV1TeamId(ctx.UserContext(), request.(GetApiV1TeamIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiV1TeamId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetApiV1TeamIdResponseObject); ok {
		if err := validResponse.VisitGetApiV1TeamIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutApiV1TeamId operation middleware
func (sh *strictHandler) PutApiV1TeamId(ctx *fiber.Ctx, id string) error {
	var request PutApiV1TeamIdRequestObject

	request.Id = id

	var body PutApiV1TeamIdJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiV1TeamId(ctx.UserContext(), request.(PutApiV1TeamIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiV1TeamId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PutApiV1TeamIdResponseObject); ok {
		if err := validResponse.VisitPutApiV1TeamIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiV1User operation middleware
func (sh *strictHandler) GetApiV1User(ctx *fiber.Ctx, params GetApiV1UserParams) error {
	var request GetApiV1UserRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiV1User(ctx.UserContext(), request.(GetApiV1UserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiV1User")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetApiV1UserResponseObject); ok {
		if err := validResponse.VisitGetApiV1UserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiV1User operation middleware
func (sh *strictHandler) PostApiV1User(ctx *fiber.Ctx) error {
	var request PostApiV1UserRequestObject

	var body PostApiV1UserJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiV1User(ctx.UserContext(), request.(PostApiV1UserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiV1User")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostApiV1UserResponseObject); ok {
		if err := validResponse.VisitPostApiV1UserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteApiV1UserId operation middleware
func (sh *strictHandler) DeleteApiV1UserId(ctx *fiber.Ctx, id string) error {
	var request DeleteApiV1UserIdRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiV1UserId(ctx.UserContext(), request.(DeleteApiV1UserIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiV1UserId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteApiV1UserIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiV1UserIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiV1UserId operation middleware
func (sh *strictHandler) GetApiV1UserId(ctx *fiber.Ctx, id string) error {
	var request GetApiV1UserIdRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiV1UserId(ctx.UserContext(), request.(GetApiV1UserIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiV1UserId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetApiV1UserIdResponseObject); ok {
		if err := validResponse.VisitGetApiV1UserIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutApiV1UserId operation middleware
func (sh *strictHandler) PutApiV1UserId(ctx *fiber.Ctx, id string) error {
	var request PutApiV1UserIdRequestObject

	request.Id = id

	var body PutApiV1UserIdJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiV1UserId(ctx.UserContext(), request.(PutApiV1UserIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiV1UserId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PutApiV1UserIdResponseObject); ok {
		if err := validResponse.VisitPutApiV1UserIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
